//-----------------------------------------------------------------
//  EF2 Level Script File
//
//	Level:	seceret2
//	Script:
//	Geometry:
//	Created:
//	Updated for Coop on:	2007.01.11 Chrissstrahl
//	Last Edited:			2007.04.08 Chrissstrahl
//-----------------------------------------------------------------

void main();
void holoDeckSetup();
void holoDeckFadeOut();
void holoDeckFadeIn();
void levelComplete();
void initWorld();

void beginStage1();
void beginStage2();
void beginStage3();
void moveLight( entity l, float light_no );
void attackOpfer( string opfer, float light_no );//Co-Op
void fighter1Damaged();
void fighter2Damaged();
void fighter3Damaged();
void fighterDamaged( float fighter_no );
void fighterExplode( float fighter_no );
void fighterFlame( float fighter_no );

void givePlayerAmmo();
void coop_endLevel();


//Co-op
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
#include "coop_mod/maps/main.scr"
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

#include "maps/global_scripts/global_common.scr"
#include "maps/global_scripts/global_math.scr"
#include "maps/m6/m6-exterior_entityHierarchy.scr"


//Co-op
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
float search_fighter1_hits,search_fighter2_hits,search_fighter3_hits;
float search_fighter1_hitsMax = 5;//5
float search_fighter2_hitsMax = 8;//8
float search_fighter3_hitsMax = 15;//15
float avoidChrash;//Security Update Chrissstrahl
entity distanceTo;//SP/MP player/DUMMY
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////


//================================================================================
// Main
//================================================================================

//---------------------
// Function: main
// Comments:
// the main thread run at the start of the level
//---------------------
void main()
{
//Set new transport out location
	$t88.origin('-224 -256 900');
	
	$world.entity_fade_dist( 10000 );
	$world.farplane_color ( '0.1 0.12 0.1' );
	$world.farplane ( 7000 );
	$world.weather( "rain", 400 );
//Co-op
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

//Do not reboot the server when this map ends
/////////////////////////////////////////////////////////////////////////
	coop_vector_lmsStartedPausedWarmuptime_z = 10;//set lms warmuptime to 10 no matter what else is setup
	coop_string_nextMapToCheck			= "ef2_minigame2";//set the map we gona load next while we are in testmode
//Set spawnangles for this level
	coop_float_spawnAngle1 			= 180;
	coop_float_spawnAngle3 			= 180;
	coop_float_spawnAngle5 			= 180;
	coop_float_spawnAngle7 			= 180;
//Definie Objective
	coop_string_objectiveItem1			= "secretObjectiveS2";
//Give each player a Item/weapon, the integer stands for the player-ID
	coop_string_weapon1				= "models/weapons/worldmodel-CompressionRifle.tik";
	coop_string_weapon2				= "models/weapons/worldmodel-GrenadeLauncher.tik";
	coop_string_weapon4				= "models/weapons/worldmodel-Tricorder-stx.tik";
//spawnorigins, Spawn Players on those locations, at map start
	coop_vector_spawnOrigin1			= '-400 -60 703';
	coop_vector_spawnOrigin2			= '-760 -60 703';
	coop_vector_spawnOrigin3			= '-400 -140 703';
	coop_vector_spawnOrigin4			= '-760 -140 703';
	coop_vector_spawnOrigin5			= '-400 -260 703';
	coop_vector_spawnOrigin6			= '-760 -260 703';
	coop_vector_spawnOrigin7			= '-400 -340 703';
	coop_vector_spawnOrigin8			= '-760 -340 703';
//Spawn Dumy (replacement for player)
	spawn( "script_model", "model", "fx/fx-dumy.tik", "targetname", "positionCheck");
	search_fighter1_hitsMax = 5;//5
	search_fighter2_hitsMax = 8;//8
	search_fighter3_hitsMax = 12;//12
//Add Broken weapons
	$world.addbroken( "burstrifle" );//remember fightes are die by hitcount not by amount of damage
	$world.addbroken( "AttrexianRifle" );
	$world.addbroken( "RomulanDisruptor" );
	$world.addbroken( "TetryonGatlingGun" );//remember fightes are die by hitcount not by amount of damage
	$world.addbroken( "RomulanRadGun" );//Makes only big boom
//Set New Objective
	globalCoop_main();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
	holoDeckSetup();
	initWorld();
	thread globalCoop_objectives_update("incomplete",1,1);//State,Item,ShowIt
	
	globalCoop_main_waitForWarmupTime();
	thread holoDeckFadeOut();
//Co-op
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
	if( cvar_bool_multiplayer ){//Co-Op
		$positionCheck.origin( '-400 -247 789' );
		$positionCheck.notsolid();
		$positionCheck.hide();
		distanceTo = getEntity("positionCheck");//Return dummy
	}
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
	else{
		distanceTo = getEntity("player");//Return player for singleplayer
		wait ( 5 );	
	}
	thread beginStage1();
	thread givePlayerAmmo();
}

//------------------------
// this thread sets up the Holo Deck And Player
//------------------------
void holoDeckSetup()
{
	//soundtrack( "music/igm1.mus" );
	waitForPlayer();
	//Single Player Only
	if(!cvar_bool_multiplayer){cam_fadeout( .05, 0, 0, 0, 1, 0 );}
	globalCommon_SpawnScriptModel( "enviro/enterprise_holo-deck.tik", "holoDeck", '-409 -331 720', 90 );
	if( !cvar_bool_multiplayer ){//Co-Op
		$player.immobilize( 1 );
		$holoDeck.origin( $player.getorigin() );
		$holoDeck.angle(90);
	}
	else{
		$holoDeck.origin('-569 -281 690');
	}
	$holoDeck.notsolid();
	$holoDeck.rendereffects( "+depthhack" );
	$holoDeck.forcealpha( 1 );
	$holoDeck.alpha( 1 );
}

//------------------------
// this thread makes the Holo Deck Fade Out
//------------------------
void holoDeckFadeOut()
{
	waitForPlayer();
//Co-Op
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
	if(cvar_bool_multiplayer){//Multi Player Mode )
		$holoDeck.fade( 3, 0 );
		wait( 3 );
		$holoDeck.hide();
		$holoDeck.alpha( 0 );
		$holoDeck.remove();	
	}
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////	
	else
	{
		cam_fadein( .5, 0, 0, 0, 1, 0 );
		wait( 2 );
		$player.loadobjectives( "secret2" );
		$player.setobjectiveshow( "secretObjectiveS2", 1 );
	
		$holoDeck.fade( 2, 0 );
		wait( 2 );
		$holoDeck.hide();
		$holoDeck.alpha( 0 );
		
		$player.immobilize( 0 );
	}
	level_ai ( 1 );
}

//------------------------
// this thread makes the Holo Deck Fade Out
//------------------------
void holoDeckFadeIn()
{
//Set Objective Complete
	thread globalCoop_objectives_update("complete",1,1);//State,Item,ShowIt
//Co-Op
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
	if(	cvar_bool_multiplayer ){
		wait(3);
		coop_endLevel();
		return;
	}
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
	if( !cvar_bool_multiplayer )//Co-Op
	{
		wait( 3 );
		$player.immobilize( 1 );
		
		$holoDeck.origin( $player.getorigin() );
		$holoDeck.show();
		$holoDeck.fadein( 2, 1 );
		
		wait( 2 );
		$holoDeck.alpha( 1 );
		wait( 2 );
		
		//spawn ( "trigger_changelevel", "targetname", "trigger_endTraining", "map", "" );
		//wait( .05 );
		//trigger ( "$trigger_endTraining" );
	}		
	wait( 3 );
	stuffcmd ( "disconnect\n" );
}

//---------------------
// initWorld
// Initialize world parameters.
//---------------------
void initWorld()
{
	$search_fighter1.forcealpha(1);
	$search_fighter2.forcealpha(1);
	$search_fighter3.forcealpha(1);

	$search_fighter1.alpha(0);
	$search_fighter2.alpha(0);
	$search_fighter3.alpha(0);

	$search_fighter1.hide();
	$search_fighter2.hide();
	$search_fighter3.hide();

	$search_beam1_rotate_origin.bind( $search_fighter1 );
	$search_beam2_rotate_origin.bind( $search_fighter2 );
	$search_beam3_rotate_origin.bind( $search_fighter3 );

	$search_fighter1_targetarea.bind( $search_fighter1 );
	$search_fighter2_targetarea.bind( $search_fighter2 );
	$search_fighter3_targetarea.bind( $search_fighter3 );

	$search_fighter1_targetarea.hide();
	$search_fighter2_targetarea.hide();
	$search_fighter3_targetarea.hide();

	$search_beam1_origin.bind( $search_beam1_rotate_origin );
	$search_beam2_origin.bind( $search_beam2_rotate_origin );
	$search_beam3_origin.bind( $search_beam3_rotate_origin );

	wait ( 0.1 );

	waitforplayer();

	$world.clearAvailableViewModes();
	$world.addAvailableViewMode( "none" );

	if( !cvar_bool_multiplayer )//Co-Op
	{
		$world.playsound( "sound/player/player_invpickup.wav", 3, 1, 10000 );
		$player.give( "models/weapons/worldmodel-Phaser-stx.tik" );
		$player.give( "models/weapons/worldmodel-CompressionRifle.tik" );
		$player.give( "models/weapons/worldmodel-FieldAssaultRifle.tik" );
		$player.give( "models/weapons/worldmodel-photon.tik" );

		$player.ammo( "Plasma", 200 );
		$player.ammo( "Phaser", 200 );
		$player.ammo( "Disruptor", 200 );
		$player.ammo( "Idryll", 200 );
		$player.ammo( "Fed", 200 );

		$player.armor( "BasicArmor", 100 );

		$player.use( "photonBurst" );
		wait  ( 3 );
	}
}

void fighter1Damaged()
	{
		fighterDamaged( 1 );
	}

void fighter2Damaged()
	{
	
		fighterDamaged( 2 );
	}

void fighter3Damaged()
	{
		fighterDamaged( 3 );
	}

void fighterDamaged( float fighter_no )
	{
	if( avoidChrash )//Co-Op
		return;
	avoidChrash = 1;
	entity fighter;
	string fighter_origin_string;
	vector fighter_origin_vector;
	float  fighter_x;
	float  fighter_y;
	float  fighter_z;

	fighter = getentity( "search_fighter" + fighter_no );

	fighter_origin_vector = fighter.getorigin();
	fighter_x             = vectorgetx( fighter_origin_vector );
	fighter_y             = vectorgety( fighter_origin_vector );
	fighter_z             = vectorgetz( fighter_origin_vector );

	fighter_origin_string = fighter_x + " " + fighter_y + " " + fighter_z;

//	spawn( "fx/fx-explosion-fire-large.tik", "origin", fighter_origin_string, "scale", "5.0" );

	fighter.anim ( "damaged" );
	waitforanimation( fighter,"damaged");
	fighter.anim ( "idle" );
	waitforanimation( fighter,"idle");

	if ( fighter_no == 1 )
		{
		search_fighter1_hits += 1;
		// if ( search_fighter1_hits == 2 )
			// thread fighterFlame( 1 );
		if ( search_fighter1_hits == search_fighter1_hitsMax )//Co-Op
			thread fighterExplode( 1 );
		}

	if ( fighter_no == 2 )
		{
		search_fighter2_hits += 1;
		// if ( search_fighter2_hits == 2 )
			// thread fighterFlame( 2 );
		if ( search_fighter2_hits == search_fighter2_hitsMax )//Co-Op
			thread fighterExplode( 2 );
		}

	if ( fighter_no == 3 )
		{
		search_fighter3_hits += 1;
		//if ( search_fighter3_hits == 2 )
			//thread fighterFlame( 3 );
		if ( search_fighter3_hits == search_fighter3_hitsMax )//Co-Op
			thread fighterExplode( 3 );
		}
	avoidChrash = 0;
	}

void fighterFlame( float fighter_no )
	{
	entity fighter;
	entity fighter_flame;

	fighter = getentity( "search_fighter" + fighter_no );

	// spawn( "script_model", "model", "fx/fx-blueplasma.tik", "targetname", "search_fighter" + fighter_no + "_flame", "scale", "5.0" );
	// wait( 0.1 );
	// fighter_flame = getentity( "search_fighter" + fighter_no + "_flame" );
	// wait( 0.1 );
	// fighter_flame.bind( fighter );
	// centerprint( "Flame!" );
	}
	
void fighterExplode( float fighter_no )
	{
	entity fighter;
	entity fighter_beam;
	entity fighter_targetarea;
	string fighter_origin_string;
	vector fighter_origin_vector;
	float  fighter_x;
	float  fighter_y;
	float  fighter_z;

	fighter            = getentity( "search_fighter" + fighter_no );
	fighter_beam       = getentity( "search_beam" + fighter_no );
	fighter_targetarea = getentity( "search_fighter" + fighter_no + "_targetarea" );

	fighter_origin_vector = fighter.getorigin();
	fighter_x             = vectorgetx( fighter_origin_vector );
	fighter_y             = vectorgety( fighter_origin_vector );
	fighter_z             = vectorgetz( fighter_origin_vector );

	fighter_origin_string = fighter_x + " " + fighter_y + " " + fighter_z;

	spawn( "fx/fx-explosion-spaceship-idryll.tik", "origin", fighter_origin_string, "scale", "1.0" );
	fighter.playsound ( "sound/impact/explosion/expl_drullship.wav" , 2 , 2 , 4384 );
	fighter.remove();
	fighter_targetarea.remove();
	}

//----------------------------------------------------------------------
//----------------------------------------------------------------------
//	Function Implematations
//----------------------------------------------------------------------
//----------------------------------------------------------------------

void beginStage1()
	{
//Co-op
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
//Wait until the warmup time is gone
	globalCoop_main_waitForWarmupTime();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
	$search_fighter1.followpath( $search_path1 , "loop" , "normalangles" );
	$search_fighter1.playsound ( "sound/ships/drull/drull_flyby1.wav" , 2 , 1.5 , 10000 );
	//$search_beam1.loopsound( "sound/ships/drull/drull_scan1.wav", 7, 700);//Co-op

	wait ( 4 );
	$search_fighter1.fadein ( 1 );
	$search_fighter1.show ();
	wait( 2.0 );

	thread moveLight( $search_beam1_origin, 1 );
	search_fighter1_hits = 0;
	search_fighter1_hitsMax = globalCoop_return_floatMultiplicatedPlayerQuantity(search_fighter1_hitsMax);
	while( search_fighter1_hits < search_fighter1_hitsMax )//Co-OP
		{
		$search_fighter1_targetarea.ondamage( "fighter1Damaged" );
		wait( 1.2 );
		}
	$search_beam1_origin.remove ();
//	$search_fighter1.remove();
//	$search_beam1.remove();
//	$search_fighter1_targetarea.remove();
	thread beginStage2();
	}



void beginStage2()
	{
	//centerprint( "Begin Stage 2 of 3." );

	$search_fighter2.followpath( $search_path2 , "loop"  , "normalangles"  );
	$search_fighter2.playsound ( "sound/ships/drull/drull_flyby1.wav" , 2 , 1.5 , 10000 );
	//$search_beam2.loopsound( "sound/ships/drull/drull_scan1.wav", 7, 700);//Co-op

	wait ( randomint ( 4 ) + 3 );
	$search_fighter2.fadein ( 1 );
	$search_fighter2.show ();

	wait( 2.0 );

	thread moveLight( $search_beam2_origin, 2 );

	search_fighter2_hits = 0;
	search_fighter2_hitsMax = globalCoop_return_floatMultiplicatedPlayerQuantity(search_fighter2_hitsMax);//Co-op
	while( search_fighter2_hits < search_fighter2_hitsMax )//Co-op
		{
		$search_fighter2_targetarea.ondamage( "fighter2Damaged" );
		wait( 1.2 );
		}
	$search_beam2_origin.remove ();
//	$search_fighter2.remove();
//	$search_beam2.remove();
//	$search_fighter2_targetarea.remove();

	thread beginStage3();
	}


void beginStage3()
	{
	//centerprint( "Begin Stage 3 of 3." );

	$search_fighter3.followpath( $search_path3 , "loop"  , "normalangles"  );
	$search_fighter3.playsound ( "sound/ships/drull/drull_flyby1.wav" , 2 , 1.5 , 10000 );
	//$search_beam3.loopsound( "sound/ships/drull/drull_scan1.wav", 7, 700);//Co-op

	wait ( randomint ( 4 ) + 3 );

	$search_fighter3.fadein ( 1 );
	$search_fighter3.show ();

	wait( 2.0 );

	thread moveLight( $search_beam3_origin, 3 );

	search_fighter3_hits = 0;

	search_fighter3_hitsMax = globalCoop_return_floatMultiplicatedPlayerQuantity(search_fighter3_hitsMax);//Co-op
	while( search_fighter3_hits < search_fighter3_hitsMax )//Co-op
		{
		$search_fighter3_targetarea.ondamage( "fighter3Damaged" );
		wait( 1.2 );
		}
	$search_beam3_origin.remove ();
//	$search_fighter3.remove();
//	$search_beam3.remove();

	thread levelComplete();
	}

//----------------------------------------------------------------------
//----------------------------------------------------------------------

void moveLight( entity l, float light_no )
{
//Co-op
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
float randomOpfer;
string opfer;

	while ( doesEntityExist ( l ) )
	{
		if( ( (globalMath_GetDistance ( l.getorigin() , distanceTo.getorigin() ) <= 2000 )))
		{
			//$positionCheck.selfdetonate();
			if( cvar_bool_multiplayer )//Co-Op
			{
				randomOpfer = randomint( 7 );
				if( randomOpfer == 0 && doesEntityExist( $player1 ) )
				{
					opfer = "$player1";
					attackOpfer( opfer, light_no );
				}
				else if( randomOpfer == 1 && doesEntityExist( $player2 ) )
				{
					opfer = "$player2";
					attackOpfer( opfer, light_no );
				}
				else if( randomOpfer == 2 && doesEntityExist( $player3 ) )
				{
					opfer = "$player3";
					attackOpfer( opfer, light_no );
				}
				else if( randomOpfer == 3 && doesEntityExist( $player4 ) )
				{
					opfer = "$player4";
					attackOpfer( opfer, light_no );
				}
				else if( randomOpfer == 4 && doesEntityExist( $player5 ) )
				{
					opfer = "$player5";
					attackOpfer( opfer, light_no );
				}
				else if( randomOpfer == 5 && doesEntityExist( $player6 ) )
				{
					opfer = "$player6";
					attackOpfer( opfer, light_no );
				}
				else if( randomOpfer == 6 && doesEntityExist( $player7 ) )
				{
					opfer = "$player7";
					attackOpfer( opfer, light_no );
				}
				else if( randomOpfer == 7 && doesEntityExist( $player8 ) )
				{
					opfer = "$player8";
					attackOpfer( opfer, light_no );
				}
				wait( 0.01 );
			}
		}
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
		else if( !cvar_bool_multiplayer )//Co-Op
		{
			//forcemusic( "action", "normal" ); //Ritual Relict, spams the console
			if ( (globalMath_GetDistance ( l.getorigin() , $player.getorigin() ) <= 2048 ))
			{
				if ( light_no == 1 )
				{
					$search_beam1_rotate_origin.projectileAttackEntity ( "models/projectile/projectile-photonball-idryll.tik" , "$player" , 5 ,20 );
					wait ( .5 );
					$search_beam1_rotate_origin.projectileAttackEntity ( "models/projectile/projectile-photonball-idryll.tik" , "$player" , 5 ,20 );
				}
				if ( light_no == 2 )
				{
					$search_beam2_rotate_origin.projectileAttackEntity ( "models/projectile/projectile-photonball-idryll.tik" , "$player" , 5 ,20 );
					wait ( .5 );
					$search_beam2_rotate_origin.projectileAttackEntity ( "models/projectile/projectile-photonball-idryll.tik" , "$player" , 5 ,20 );
				}
				if ( light_no == 3 )
				{
					$search_beam3_rotate_origin.projectileAttackEntity ( "models/projectile/projectile-photonball-idryll.tik" , "$player" , 5 ,20 );
					wait ( .01 );
					$search_beam3_rotate_origin.projectileAttackEntity ( "models/projectile/projectile-photonball-idryll.tik" , "$player" , 5 ,20 );
				}
				wait ( 1 );
			}	
		}
		wait ( .05 );
	}
}
//----------------------------------------------------------------------
//----------------------------------------------------------------------


void attackOpfer( string opfer, float light_no )
{
	if ( light_no == 1 )
	{
		$search_beam1_rotate_origin.projectileAttackEntity ( "models/projectile/projectile-photonball-idryll.tik" , opfer , 5 ,20 );
		wait ( .5 );
		$search_beam1_rotate_origin.projectileAttackEntity ( "models/projectile/projectile-photonball-idryll.tik" , opfer , 5 ,20 );
	}
	if ( light_no == 2 )
	{
		$search_beam2_rotate_origin.projectileAttackEntity ( "models/projectile/projectile-photonball-idryll.tik" , opfer , 5 ,20 );
		wait ( .5 );
		$search_beam2_rotate_origin.projectileAttackEntity ( "models/projectile/projectile-photonball-idryll.tik" , opfer , 5 ,20 );
	}
	if ( light_no == 3 )
	{
		$search_beam3_rotate_origin.projectileAttackEntity ( "models/projectile/projectile-photonball-idryll.tik" , opfer , 5 ,20 );
		wait ( .5 );
		$search_beam3_rotate_origin.projectileAttackEntity ( "models/projectile/projectile-photonball-idryll.tik" , opfer , 5 ,20 );
	}
	wait ( 1 );
}


void levelComplete()
{
	holoDeckFadeIn();
}

//------------------------------------
// While this is going give player ammo & he will never run out.
//------------------------------------
void givePlayerAmmo()
{
	while( 1 )
	{
		wait( 5 );
		globalCoop_main_globalCommand("ammo");
	}
}


void coop_endLevel()
//------------------------------------------------------------------------------
//Level end
//------------------------------------------------------------------------------
{
	thread globalCoop_mission_completed("ef2_minigame2");
}