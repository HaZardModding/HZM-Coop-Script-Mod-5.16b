//paradise island 2 FUNCTION DECLARATIONS
//BRIDGE1///////////////////////////////////////////////////////////////////////
void	bridg1_objective1();
void	bridg1_objective2();
void	bridg1_objective3();
void	bridge1_powerCouple_setup(entity e);
void	bridge1_forceFieldGroup1Down();
void	bridge1_playerFoundShutdown();
void	bridge1_forceFieldGroup1Down();
void	bridge1_playerOnBridge();
void	bridge1_powerCupleUsed();
void	bridge1_powerCupleSolvedShutdown(entity e);
void	bridge1_powerCupleSolved();
void	bridge1_towerPuzleSolved();
void	bridge1_powerCuple0Solved();
void	bridge1_powerCuple1Solved();
void	bridge1_powerCuple2Solved();
void	bridge1_powerCuple3Solved();
//BRIDGE2///////////////////////////////////////////////////////////////////////
void	bridge2_lader();
void	bridge2_laderPartDown(entity e);
void	bridge2_bombPlant();
//CASTLE////////////////////////////////////////////////////////////////////////
void	castleSpawn();
void	castleAiSetup(entity e);
void	castleCourtyard();
void	castleCourtyard1();
void	castleCourtyard2();
void	castleSwitchLeft();
void	castleSwitchRight();
void	castleInnerDoorOpen();
void	castleLiftOperational();
void	castleLiftObjective();
void	castleLift();
//FORCEFIELDS///////////////////////////////////////////////////////////////////
void	forceFields_deactivate(entity e);
void	forceFields_activate(entity e);
void	forceFields_touched();
void	forceFields_damaged();
//BOXES/////////////////////////////////////////////////////////////////////////
void	boxes_caps_setup();
void	boxes_caps_destroyed();
void	boxes_spawn(float fNum);
float	float_boxes;
float	float_boxesLast;
float	float_boxesToolBox;
//MINES/////////////////////////////////////////////////////////////////////////
void	mines_setup(float fMinesMax,entity eField);
void	mines_blow();
void	mines_plant(vector vOrigin);
//WATER/////////////////////////////////////////////////////////////////////////
void	hzm_waterTouched();
void	hzm_waterTakeCareOfPlayer(entity ePlayer,entity eTrigger);
float	hzm_waterCheckBB(vector vOri1,vector vMins1,vector vMaxs1,vector vOri2,vector vMins2,vector vMaxs2,float fPad);
float	hzm_waterReturnFloatNotNegative(float fNotNegative);
float	hzm_waterCheckValueOfGiven(float fValue,float fGiven);
void	hzm_waterPlayerLeakAir(entity ePlayer,entity eTrigger);
void	hzm_waterShakeAndMoveUp(entity eBubble,entity eTrigger);
float	hzm_water_float_checkAssiningToucher;//Don't touch this one it's set automaticly
float	hzm_water_integer_airTime = 12;			//(12 MIN:5) Time how long in sec the player can stand under water before he leaks air
float	hzm_water_integer_damageInvervall = 3;	//(3 MIN:3) Player leak air all x sec when still under water
float	hzm_water_float_damageDivider = 1;		//(1) player takes damage the time he is under water, 5 secounds = 5 damage, 
												//the divider factor works like this: 25-secounds / 5-divider = 5 damage
float	hzm_water_integer_minimumBubbles = 3;	//(3 MAX:11) air bubles minimum leaked per damage
float	hzm_water_integer_maximumBubbles = 10;	//(6 MAX:12) air bubles maximum leaked per damage and leaked when player gets drown
//PARATROOPER///////////////////////////////////////////////////////////////////
float	returnFallschirmspringerId(entity e);
void	relaseFallschirmspringer(float fNumber);
void	blockedFallschirmspringer();
void	startFallschirmspringer(float fNumber,vector vStart,vector vLand,string sModel);
void	cageInFallschirmspringerStop();
void	cageInFallschirmspringer(entity e,vector vVelocity);
//SINGLEPLAYER//////////////////////////////////////////////////////////////////
void	singleplayer_regenerate();
//ROMSHUTTLE////////////////////////////////////////////////////////////////////
void romulanShuttle_setup(float fId);
void romulanShuttle_endAttack();
void romulanShuttle_shieldsDown(float fId);
void romulanShuttle_shieldsUp(float fId);
void romulanShuttle_fire(float fId,float fTime);
void romulanShuttle_blocked();
void romulanShuttle_touched();
//PUZZLE////////////////////////////////////////////////////////////////////////
//void puzzle_use();
//void puzzle_modulate();
//void puzzle_timer(entity ePlayer,entity ePuzzleObject,float fTime);
//void puzzle_add(string sTargetname,float fTimeToSolve,vector vOrigin,string sSolvedThread);
//float checkTricorderInHands(entity ePlayer);
//ROCKS/////////////////////////////////////////////////////////////////////////
void rocks_damaged();
void rocks_fall();
void rocks_moveRock1();
void rocks_moveRock2();
void rocks_moveRock3();
void rocks_moveRock4();
void rocks_moveRock5();
void rocks_moveRock6();
void rocks_moveRock7();
void rocks_move(entity eRock,float fWest,float fDown,float fTime,float fImpact,float fSound);

