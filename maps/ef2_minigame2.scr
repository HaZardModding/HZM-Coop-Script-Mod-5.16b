//===================================================
//  EF2 Level Script File
//
//  Level:			ef2_minigame2
//  Script By:		Richard H., Adam B.
//  Geometry By:	Richard H., Adam B.
//  Created On:		12/4/02
//
//  Updated for Co-Op: Chrissstrahl - 2007 -> before April
//  Last Edited:	Chrissstrahl - 2007.04.09
//===================================================
//ontouch( String label )


void main();
void init();

void firstCombatRoom_start();

void setCamera1();
void setCamera2();
void setCamera3();
void setCamera4();

void spawnInThread( entity spawnPoint, string spawnPointString, entity spawnName, string spawnNameString);
void itemSpawn();

void randomPickerTimerThread();

void randomPicker();
void randomSpawn();
void randomObject();

void spawnedKillThread();
void level_complete();
void coop_endLevel();

float objectchoice,objectpicked;
float spawnchoice,spawnpicked;
float spawntype;
float 	objectchoice2spawned,objectchoice3spawned,objectchoice4spawned,
		objectchoice5spawned,objectchoice6spawned,objectchoice7spawned,
		objectchoice10spawned,objectchoice11spawned;
float randomPickerTimer,randomPickerTimerCounts;
float degeneratingwait = 3;
float spawnpointchoosen,objecttypechoosen;
float	spawn1used,spawn2used,spawn3used,spawn4used,spawn5used,spawn6used,
		spawn7used,spawn8used,spawn9used,spawn10used,spawn11used,spawn12used,
		spawnUsed;
float 	spawned;

string objecttype = "";


//Co-op
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
float monstersSpawned,monstersKilled;
#include "coop_mod/maps/main.scr"
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

//==========================================================================================
//  Main Stuff
//==========================================================================================

//---------------------
// Function: main
// Comments:
// this is the thread called at the start of the level
//---------------------
void main()
{
//Co-op
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
	coop_vector_lmsStartedPausedWarmuptime_z = 15;//set lms warmuptime to 10 no matter what else is setup
	coop_string_nextMapToCheck		= "secret3";//set the map we gona load next while we are in testmode
//Set spawnangles for this level
	coop_float_spawnAngle1 			= 129;
	coop_float_spawnAngle2 			= 51;
	coop_float_spawnAngle3 			= 325;
	coop_float_spawnAngle4 			= 328;
	coop_float_spawnAngle5 			= 2;
	coop_float_spawnAngle6 			= 348;
	coop_float_spawnAngle7 			= 331;
	coop_float_spawnAngle8 			= 7;
//Take away Items/Weapons
	coop_string_mp_waponToTakeAwayFromPlayer2 		= "";//Don't take away the Bat'leth
//Definie Objective
	coop_string_objectiveItem1			= "minigameObjective";
//Give each player a Item/weapon
	coop_string_weapon1 				= "models/weapons/worldmodel-Batleth.tik";	
//spawnorigins, Spawn Players on those locations, at map start
	//coop_vector_spawnOrigin12	= '380 560 150';
	//coop_vector_spawnOrigin11	= '380 500 150';
	//coop_vector_spawnOrigin10	= '380 440 150';
	//coop_vector_spawnOrigin9	= '380 380 150';
	coop_vector_spawnOrigin8	= '440 560 150';
	coop_vector_spawnOrigin7	= '440 500 150';
	coop_vector_spawnOrigin6	= '440 440 150';
	coop_vector_spawnOrigin5	= '440 380 150';
	coop_vector_spawnOrigin4	= '500 560 150';
	coop_vector_spawnOrigin3	= '500 500 150';
	coop_vector_spawnOrigin2	= '500 440 150';
	coop_vector_spawnOrigin1	= '500 380 150';
//Start the Co-Op Script	
	globalCoop_main();
	cvar_bool_coop_disClass=1;
	thread globalCoop_objectives_update("incomplete" , 1 , 1);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////


	$world.entity_fade_dist( 10000 );
	$world.farplane_color ( '0.1 0.12 0.1' );
	$world.farplane ( 3000 );
	$world.weather( "rain", 200 );
	
	thread init();
	if( !cvar_bool_multiplayer ){//sp
		waitForPlayer();
		$player.ammo ( "Plasma" , 200 );
		$player.ammo ( "Fed" , 200 );
		$player.model( "models/char/dm_kourban.tik" );
		stuffCMD("set cg_3rd_person 1");
	}else{
		float fSpawn;
		entity eSpawn;
		vector vOrigin;
		for(fSpawn=1;fSpawn<13;fSpawn++){
			eSpawn=getEntity("spawn"+fSpawn);
			if(doesEntityExist(eSpawn))
			{
				vOrigin=eSpawn.getOrigin();
				vOrigin_z+=120;
				eSpawn.origin(vOrigin);
			}
		}
	}
}

//---------------------
// Function: init
// Comments:
// thread called by init to handle world setup
//---------------------
void init()
{
	if( !cvar_bool_multiplayer )//Co-op
	{
		spawn( "Camera", "targetname", "cam1" );
		spawn( "Camera", "targetname", "cam2" );
		spawn( "Camera", "targetname", "cam3" );
		spawn( "Camera", "targetname", "cam4" );

		cam.load( "ef2_minigame2_newcam1" );
		cam.load( "ef2_minigame2_newcam2" );
		cam.load( "ef2_minigame2_cam2" );
		cam.load( "ef2_minigame2_cam3" );
		wait( 0.1 );

		cuecamera( $cam1 );
		$cam1.follow(  $ef2_minigame2_newcam1, $player);
		$cam2.follow(  $ef2_minigame2_newcam2, $player);
		$cam3.follow(  $ef2_minigame2_cam2, $player);
		$cam4.follow(  $ef2_minigame2_cam3, $player);
	}

	// stuff from first one
	objectpicked = objectchoice;
	spawnpicked = spawnchoice;


	waitForPlayer();
	soundtrack( "music/m8l1a.mus" );
	if( cvar_bool_multiplayer ){//Co-Op
		return;
	}
	//$player.forceMoveType( "secret" );
	//$player.give( "models/weapons/worldmodel-Batleth.tik" );
	//$player.use( "batleth" );

	cam_fadein( 1, 0, 0, 0, 1, 0 );

	wait(.1);
	$player.loadobjectives( "ef2_minigame2" );
	wait( .25 );
	$player.setobjectiveshow( "minigameObjective", 1 );
}

float SPAWN_WAIT_TIME = 10;
float nextItemSpawnerNum = 1;

entity getNextItemSpawner()
{
	entity e;
	e = getentity( "itemspawner" + nextItemSpawnerNum );
	nextItemSpawnerNum++;
	if( nextItemSpawnerNum > 8 )
		nextItemSpawnerNum = 1;
	return e;
}

float itemPickedUpCount = 4;
void itemPickedUp()
{
	itemPickedUpCount--;
}


void doItemSpawn( string themodelname ) 
{
	if(itemPickedUpCount <= 0){
		return;
	}
	
	entity spawner, e;
	spawner = getNextItemSpawner(); 
	spawner.modelname( themodelname );
	
	//spawner.spawnnow(); 
	wait( 0.05 );
	//spawner.modelname( "fx/fx-explosion-sparkshower-enterprise.tik" );
	spawner.spawneffectname( "TransportIn", "Federation" );
	spawner.checkforspace();
	spawner.pickup_thread("itemPickedUp");
	wait( 0.5 );
	e = spawner.spawnnow();
	
	//spawner.playsound( "sound/impact/explosion/big2a.wav", 9, 1, 111111 );
	wait( SPAWN_WAIT_TIME ); 
}

void itemSpawn()
{
	string sshealth, slhealth, ssplasma, slplasma, sburstrifle, simod, stetryon, sarmor;
	string ssfed, slfed, sgrenadelauncher;
	
	sshealth 	= "item/health_large-hypospray.tik";
	slhealth 	= "item/health_large-hypospray.tik";
	ssplasma 	= "item/ammo_large.tik";
	slplasma 	= "item/ammo_large.tik";
	ssfed 		= "item/ammo_fed_large.tik";
	slfed 		= "item/ammo_fed_large.tik";
	sgrenadelauncher = "weapons/worldmodel-GrenadeLauncher.tik";
	sburstrifle = "weapons/worldmodel-BurstRifle.tik";
	simod 		= "weapons/worldmodel-tetryon.tik";
	stetryon 	= "weapons/worldmodel-tetryon.tik";
	sarmor 		= "item/sp_armor_large_shield.tik";

	doItemSpawn( sshealth );
	doItemSpawn( sshealth );
	if(cvar_bool_multiplayer ){//Co-Op
		wait( SPAWN_WAIT_TIME );		
		wait( SPAWN_WAIT_TIME );		
	}
	else{
		doItemSpawn( sburstrifle );
	}
	if(!cvar_bool_multiplayer )//Co-Op
		doItemSpawn( slplasma );

	doItemSpawn( sshealth );
	if(cvar_bool_multiplayer ){//Co-Op
		globalCoop_main_globalCommand( "ammo" );
	}
	else{
		doItemSpawn( slplasma );
	}
	
	if(!cvar_bool_multiplayer )
		doItemSpawn( sshealth );
	if(!cvar_bool_multiplayer )
		doItemSpawn( slfed );
	if(!cvar_bool_multiplayer )
		doItemSpawn( sshealth );
	if(cvar_bool_multiplayer ){
		wait( SPAWN_WAIT_TIME );
		coop_string_weapon1 = "models/weapons/worldmodel-BurstRifle.tik";
		globalCoop_player_giveAll( sburstrifle,.1 );
		wait( SPAWN_WAIT_TIME );
	}
	else{
		doItemSpawn( sgrenadelauncher );
	}
	doItemSpawn( slhealth );
	if(cvar_bool_multiplayer ){
		globalCoop_main_globalCommand( "ammo" );
	}
	else{
		doItemSpawn( ssplasma );
	}
	if(!cvar_bool_multiplayer )
		doItemSpawn( sshealth );
	if(!cvar_bool_multiplayer )
		doItemSpawn( slhealth );

	if(cvar_bool_multiplayer ){
		globalCoop_main_globalCommand( "armor" );
	}
	else{
		doItemSpawn( sarmor );
	}
	if(cvar_bool_multiplayer )
	{
		wait( SPAWN_WAIT_TIME );
		coop_string_weapon1 = "models/weapons/worldmodel-tetryon.tik";
		coop_string_weapon2 = "models/weapons/worldmodel-BurstRifle.tik";
		globalCoop_player_giveAll( stetryon,.5 );
		wait( SPAWN_WAIT_TIME );
		
	}
	else{
		doItemSpawn( stetryon );
	}	
	while( 1 )
	{
		while(coop_bool_scriptIsPaused)
		{
			wait(30);
		}
		if(!cvar_bool_multiplayer ){
			doItemSpawn( slhealth );
			doItemSpawn( slplasma );
			doItemSpawn( slfed );
			doItemSpawn( slhealth );
			doItemSpawn( slplasma );
			doItemSpawn( slhealth );
			doItemSpawn( slplasma );
			doItemSpawn( sarmor );
		}
		wait( 10 );
		if(!coop_bool_scriptIsPaused){
			globalCoop_main_globalCommand( "armor" );
			globalCoop_main_globalCommand( "ammo" );
		}
		wait(1);
	}
}

//---------------------
// Function: firstCombatRoom_start
// Comments:
// starts the first combat room
//---------------------
void firstCombatRoom_start()
{
	thread itemSpawn();
	
	if(doesEntityExist($firstCombatRoom_door1))
		$firstCombatRoom_door1.lock();
		
	thread randomPickerTimerThread();
	wait( 5 );
	
	randomPicker();
}

//==========================================================================================
//  Camera Stuff
//==========================================================================================

//---------------------
// Function: setCamera1
// Comments:
// moves to camera 1 position
//---------------------
void setCamera1()
{
	entity activator,caller;
	caller = getCurrentEntity();
	if(cvar_bool_multiplayer ){
		caller.remove();
		return;
	}
	activator = caller.getLastActivatingEntity();

	if ( activator.getTargetName() == "$player" ) {
		wait( .25 );
		cuecamera( $cam1 );
	}
}

//---------------------
// Function: setCamera2
// Comments:
// moves to camera 2 position
//---------------------
void setCamera2()
{
	entity activator,caller;
	caller = getCurrentEntity();
	if(cvar_bool_multiplayer ){
		caller.remove();
		return;
	}
	activator = caller.getLastActivatingEntity();

	if ( activator.getTargetName() == "$player" ){
		wait( .25 );
		cuecamera( $cam3 );//cam2 suxxxxxxxxxxxxxxxxx!
	}
}

//---------------------
// Function: setCamera3
// Comments:
// moves to camera 3 position
//---------------------
void setCamera3()
{
	entity activator,caller;
	caller = getCurrentEntity();
	if(cvar_bool_multiplayer ){
		caller.remove();
		return;
	}
	activator = caller.getLastActivatingEntity();

	if ( activator.getTargetName() == "$player" ) {
		wait( .25 );
		cuecamera( $cam3 );
	}
}

//---------------------
// Function: setCamera4
// Comments:
// moves to camera 4 position
//---------------------
void setCamera4()
{
	entity activator,caller;
	caller = getCurrentEntity();
	if(cvar_bool_multiplayer){
		caller.remove();
		return;
	}
	activator = caller.getLastActivatingEntity();

	if ( activator.getTargetName() == "$player" ) {
		wait( .25 );
		cuecamera( $cam4 );
	}
}

//==========================================================================================
// Globals
//==========================================================================================

//---------------------
// Function:spawnInThread
// Variables:
// spawnPoint - name of the func_spawn entity - $spawn1
// spawnPointString - name of the func_spawn entity in string form - "$spawn1"
// spawnName - spawntargetname of the func_spawn entity - $spawned1
// spawnNameString - spawntargetname of the func_spawn entity in string form - "$spawned1"
// Comments:
// global thread used for setting the spawn points in the level
// used mainly in randomSpawn
//---------------------
void spawnInThread( entity spawnPoint, string spawnPointString, entity spawnName, string spawnNameString)
{
	spawnPoint.spawntargetname ( spawnNameString );
	spawnPoint.modelname( objecttype );
	spawnPoint.starthidden(1);
	if(	doesEntityExist($spawn1)	&&
		doesEntityExist($spawn2)	&&
		doesEntityExist($spawn3)	&&
		doesEntityExist($spawn4)	&&
		doesEntityExist($spawn5)	&&
		doesEntityExist($spawn6)	&&
		doesEntityExist($spawn7)	&&
		doesEntityExist($spawn8)	&&
		doesEntityExist($spawn9)	&&
		doesEntityExist($spawn10)	&&
		doesEntityExist($spawn11)	&&
		doesEntityExist($spawn12)	)
	{trigger( spawnPointString );}
	wait( .1 );

	spawnpicked = spawnchoice;

	if( spawntype == 1 )
	{
	//coop
		globalCoop_player_makeSolidASAP(spawnName);//avoid monsters getting stuck inside players
		spawnName.health( 10 + (10 * globalCoop_return_integerPlayersQuantity(1)) * (getCvarInt("skill")) );
		spawnName.aggressive( 1 );
		spawnName.ignoremonsterclip();
		spawnName.droptofloor();
		//spawnName.deathsink();
	//eof coop
		spawnName.killthread( "spawnedKillThread" );
		spawned++;
		wait(.05);
		spawnName.show();
	}
}

//==========================================================================================
// Functions
//==========================================================================================

//---------------------
// Function: randomPickerTimerThread
// Comments:
// starts a timer that counts up every second of the game
//---------------------
void randomPickerTimerThread()
{
	while( 1 )
	{
		randomPickerTimer++;
		wait( 1 );
	}
}


void bossDied()
{

	monstersKilled++;
	if(cvar_bool_multiplayer){
		if(monstersKilled == monstersSpawned){
			thread level_complete();
		}
	}
	else{
		thread level_complete();
	}
}

void spawnForEachPlayer()//Co-Op
{
	killThread("itemSpawn");
	while(monstersSpawned < globalCoop_return_integerPlayersQuantity(1)){
		$bossSpawn.origin('1568 1440 500');
		$bossSpawn.modelname( "char/alien-type4-predator-grunt.tik" );
		triggerentity( $bossSpawn );
		
		monstersSpawned++;
		wait( 0.25 );
		$boss.droptofloor();
		$boss.killthread( "bossDied" );
		killThread("itemSpawn");
	}
}


//---------------------
// Function: randomPicker
// Comments:
// picks a random object
// then picks a random spawn for that object
// then checks the timer(randomPickerTimerThread)
// sets a new wait(degeneratingwait) after timer reaches a certain time
// adds a number to randomPickerTimerCounts every time it sets a new wait(degeneratingwait)
// checks to make sure that the wait(degeneratingwait) never goes below 1 and if it does it resets it to 1
//---------------------
void randomPicker()
{
	while( randomPickerTimer <= 120 )//120
	{
		wait( .49 );
		
		randomObject();
		wait( .01 );
		randomSpawn();

		if( randomPickerTimer >= 20 )
		{
			if( degeneratingwait <= .5 )
			{
				degeneratingwait = .5;
				wait( degeneratingwait );
				randomPickerTimerCounts++;
			}
			else
			{
				degeneratingwait = degeneratingwait*0.5;
				wait( degeneratingwait );
			
				randomPickerTimer = 0;
				randomPickerTimerCounts++;
			}
		}
		else
		{
			wait( degeneratingwait+.5 );
		}
	}

	
	if(!cvar_bool_multiplayer){
		$bossSpawn.modelname( "char/alien-type4-predator-grunt.tik" );
		triggerentity( $bossSpawn );
		wait(.3);
		$boss.killthread( "bossDied" );
		//$boss.health( 1 );
		return;
	}
	coop_string_weapon1 = "models/weapons/worldmodel-drull-staff.tik";
	coop_string_weapon2 = "models/weapons/worldmodel-tetryon.tik";
	coop_string_weapon3 = "models/weapons/worldmodel-BurstRifle.tik";
	coop_string_weapon4 = "models/weapons/worldmodel-batlet.tik";
	coop_string_mp_waponToTakeAwayFromPlayer2 = "";
	globalCoop_player_giveAll( "models/weapons/worldmodel-drull-staff.tik",5 );
	globalCoop_player_giveAll( "models/weapons/worldmodel-tetryon.tik",0 );
	globalCoop_player_giveAll( "models/weapons/worldmodel-BurstRifle.tik",0 );
	thread spawnForEachPlayer();
}

//---------------------
// Function: randomObject
// Comments:
// randomly chooses an object
// some objects are setup to only spawn after the randomPickerTimerCounts variable reaches a certain number
// some objects such as weapons are set to never spawn again after they spawn once
// objects setup a spawntype of 1 or 0 with 1 being anything AI and 0 being anything else
//
// Useable weapons list(or weapons that work well with this mode):
// weapons/worldmodel-IMod.tik
// weapons/worldmodel-tetryon.tik
// weapons/worldmodel-GrenadeLauncher.tik
// weapons/worldmodel-drull-staff.tik
// weapons/worldmodel-rom-disruptor.tik
// weapons/worldmodel-rom-radgun.tik
//---------------------
void randomObject()
{
	objecttypechoosen = 0 ;

	while ( objecttypechoosen == 0 )
	{
		if(	cvar_bool_multiplayer )
		{
			while( coop_bool_scriptIsPaused == 1)//Co-Op IF PAUSED, pause as well here then
			{
				wait( 3 );
			}		
		}
		objectchoice = randomint ( 12 );
		wait( .05 );
		
		if ( objectchoice == 0 )
		{
			objecttype = "char/alien-type1a-lurker.tik";
			spawntype = 1;
			objecttypechoosen = 1;
		}
		
		if ( objectchoice == 1 )
		{
			objecttype = "char/alien-type1b-chewer.tik";
			spawntype = 1;
			objecttypechoosen = 1;
		}
		
		if ( objectchoice == 2 )
		{
			if ( randomPickerTimerCounts < 2 )
			{
				wait( .05 );
			}
			//else if( objectchoice2spawned < 3 )
			//{
			//	objectchoice2spawned++;
			//	wait( .05 );
			//}
			else
			{
				objecttype = "char/alien-type1c-basher.tik";
				spawntype = 1;
				objectchoice2spawned = 0;
				objecttypechoosen = 1;
			}
		}
		
		if ( objectchoice == 3 )
		{
			objecttype = "char/alien-type1a-lurker.tik";
			spawntype = 1;
			objecttypechoosen = 1;
		}
		
		if ( objectchoice == 4 )
		{
			objecttype = "char/alien-type1a-lurker.tik";
			spawntype = 1;
			objecttypechoosen = 1;
		}
		
		if ( objectchoice == 5 )
		{
			objecttype = "char/alien-type1a-lurker.tik";
			spawntype = 1;
			objecttypechoosen = 1;
		}
	
		if ( objectchoice == 6 )
		{
			objecttype = "char/alien-type1a-lurker.tik";
			spawntype = 1;
			objecttypechoosen = 1;
		}
	
		if ( objectchoice == 7 )
		{
			objecttype = "char/alien-type1a-lurker.tik";
			spawntype = 1;
			objecttypechoosen = 1;
		}
	
		if ( objectchoice == 8 )
		{
			objecttype = "char/alien-type1a-lurker.tik";
			spawntype = 1;
			objecttypechoosen = 1;
		}
		
		if ( objectchoice == 9 )
		{
			objecttype = "char/alien-type1a-lurker.tik";
			spawntype = 1;
			objecttypechoosen = 1;
		}
		
		if ( objectchoice == 10 )
		{
			if ( objectchoice10spawned < 2 )
			{
				wait( .05 );
				objectchoice10spawned++;
			}
			//else if ( randomPickerTimerCounts < 6 )
			//{
			//	wait( .05 );
			//}
			else
			{
				objecttype = "char/alien-type4-predator.tik";
				spawntype = 1;
				objecttypechoosen = 1;
				objectchoice10spawned = 0;
			}
		}
		
		if ( objectchoice == 11 )
		{
			objecttype = "char/alien-type1a-lurker.tik";
			spawntype = 1;
			objecttypechoosen = 1;
		}		
	}
}

//---------------------
// Function: randomSpawn
// Comments:
// called to randomly choose a spawn point after an object has been randomly chosen
// checks to see if the spawnchoice(current chosen spawn point) is equal to the spawnpicked(last chosen spawn point) and will try for a new randomspawn point if this is true
// checks to see if the total number of enemies spawned(spawned) is to high and if so it stops spawning until it lowers
// checks to see if all spawn points have been used and if so it will reset all the spawn points(number can be set lower than total number of spawns)
// each spawn statement will set itself to used mode(spawn#used) and add a number to spawnUsed
//---------------------
void randomSpawn()
{
	spawnpointchoosen = 0;
	
	while ( spawnpointchoosen == 0 )
	{
		spawnchoice = randomint ( 12 );

		wait( .1 );

		if ( spawnchoice == spawnpicked )
		{
			wait( .05 );
		}
		else if ( spawned >= 10 )
		{
			wait( 1 );
		}
		else if ( spawnUsed >= 11 )
		{
			spawn1used = 0;
			spawn2used = 0;
			spawn3used = 0;
			spawn4used = 0;
			spawn5used = 0;
			spawn6used = 0;
			spawn7used = 0;
			spawn8used = 0;
			spawn9used = 0;
			spawn10used = 0;
			spawn11used = 0;
			spawn12used = 0;
			spawnUsed = 0;
			wait( .05 );
		}
		else
		{
			if ( spawnchoice == 0 )
			{
				if ( spawn1used == 1 )
				{
					wait( .05 );
				}
				else
				{
					thread spawnInThread( $spawn1, "$spawn1", $spawned1, "spawned1" );
					spawn1used = 1;
					spawnUsed++;
					spawnpointchoosen = 1;
				}
			}
			else if ( spawnchoice == 1 )
			{
				if ( spawn2used == 1 )
				{
					wait( .05 );
				}
				else
				{
					thread spawnInThread( $spawn2, "$spawn2", $spawned2, "spawned2" );
					spawn2used = 1;
					spawnUsed++;
					spawnpointchoosen = 1;
				}
			}
			else if ( spawnchoice == 2 )
			{
				if ( spawn3used == 1 )
				{
					wait( .05 );
				}
				else
				{
					thread spawnInThread( $spawn3, "$spawn3", $spawned3, "spawned3" );
					spawn3used = 1;
					spawnUsed++;
					spawnpointchoosen = 1;
				}
			}
			else if ( spawnchoice == 3 )
			{
				if ( spawn4used == 1 )
				{
					wait( .05 );
				}
				else
				{
					thread spawnInThread( $spawn4, "$spawn4", $spawned4, "spawned4" );
					spawn4used = 1;
					spawnUsed++;
					spawnpointchoosen = 1;
				}
			}
			else if ( spawnchoice == 4 )
			{
				if ( spawn5used == 1 )
				{
					wait( .05 );
				}
				else
				{
					thread spawnInThread( $spawn5, "$spawn5", $spawned5, "spawned5" );
					spawn5used = 1;
					spawnUsed++;
					spawnpointchoosen = 1;
				}
			}
			else if ( spawnchoice == 5 )
			{
				if ( spawn6used == 1 )
				{
					wait( .05 );
				}
				else
				{
					thread spawnInThread( $spawn6, "$spawn6", $spawned6, "spawned6" );
					spawn6used = 1;
					spawnUsed++;
					spawnpointchoosen = 1;
				}
			}
			else if ( spawnchoice == 6 )
			{
				if ( spawn7used == 1 )
				{
					wait( .05 );
				}
				else
				{
					thread spawnInThread( $spawn7, "$spawn7", $spawned7, "spawned7" );
					spawn7used = 1;
					spawnUsed++;
					spawnpointchoosen = 1;
				}
			}
			else if ( spawnchoice == 7 )
			{
				if ( spawn8used == 1 )
				{
					wait( .05 );
				}
				else
				{			
					thread spawnInThread( $spawn8, "$spawn8", $spawned8, "spawned8" );
					spawn8used = 1;
					spawnUsed++;
					spawnpointchoosen = 1;
				}
			}
			else if ( spawnchoice == 8 )
			{
				if ( spawn9used == 1 )
				{
					wait( .05 );
				}
				else
				{			
					thread spawnInThread( $spawn9, "$spawn9", $spawned9, "spawned9" );
					spawn9used = 1;
					spawnUsed++;
					spawnpointchoosen = 1;
				}
			}
			else if ( spawnchoice == 10 )
			{
				if ( spawn10used == 1 )
				{
					wait( .05 );
				}
				else
				{			
					thread spawnInThread( $spawn10, "$spawn10", $spawned10, "spawned10" );
					spawn10used = 1;
					spawnUsed++;
					spawnpointchoosen = 1;
				}
			}
			else if ( spawnchoice == 10 )
			{
				if ( spawn11used == 1 )
				{
					wait( .05 );
				}
				else
				{			
					thread spawnInThread( $spawn11, "$spawn11", $spawned11, "spawned11" );
					spawn11used = 1;
					spawnUsed++;
					spawnpointchoosen = 1;
				}
			}
			else if ( spawnchoice == 11 )
			{
				if ( spawn12used == 1 )
				{
					wait( .05 );
				}
				else
				{			
					thread spawnInThread( $spawn12, "$spawn12", $spawned12, "spawned12" );
					spawn12used = 1;
					spawnUsed++;
					spawnpointchoosen = 1;
				}
			}
		}
	}
}


//---------------------
// Function: spawnedKillThread
// Comments:
// subtracts a number from spawned(amount of enemies spawned in level) when an enemy dies
//---------------------
void spawnedKillThread()
{
	if ( spawned <= 0 )
	{
		spawned = 0;
	}
	else
	{
		spawned--;
	}
}


//---------------------
// Function: level_complete
// Comments:
// gets called after player defeats the boss, displays the mission successful screen and ends the map
//---------------------
void level_complete()
{
	thread globalCoop_objectives_update("complete" , 1 , 1);
//Co-Op
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
	if(	cvar_bool_multiplayer ){
		
		wait(2);
		coop_endLevel();
		return;
	}
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
	stuffCMD("set cg_3rd_person 0");
	spawn( "trigger_changelevel", "targetname", "trigger_endlevel", "map", "" );
	wait( 5 );
	cam_fadeout( 2, 0, 0, 0, 1, 0 );
	wait( 1.5 );
	wait( 1 );
	triggerentity( $trigger_endlevel );
	wait( 5 );
	stuffcmd( "disconnect\n" );
}


void coop_endLevel()
//------------------------------------------------------------------------------
//Level end
//------------------------------------------------------------------------------
{
	coop_vector_linuxForcerebootTransporting_y=1;
	thread globalCoop_mission_completed("secret3");
}
