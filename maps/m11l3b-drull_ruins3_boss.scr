//-------------------------------------------
//
//  EF2 Level Script File
//
//  Level:	  Drull Ruins 3 Boss Fight: Level B
//  Script By:    Jared 'BirdDawg' Hefty, Josh Martel
//  Geometry By:  Richard 'Charon' Heath, Jared 'BirdDawg' Hefty
//
//--------------------------------------------

void main();
void setupWorld();
void setupAI();
void setupPlayer();
void spawnWaves();
void runPowerupConsoles ();
void bossDialog ();
void randomCommanderDialog ();
void earthquakes ();
void tryToRemoveAllMonsters ();
void disconnectPathNodesInGrid( string basename, float width, float height, float colA, float rowA, float colB, float rowB );
void disconnectAllPathNodesInGrid( string basename, float width, float height );
void runShieldPanelAttack ();
string coop_returnClosestPlayerTargetName(entity eCloseToMe);
void coop_endLevel();

void lavaBursts();
void explodeBridge ( string bridge );
void finalBoss_go();

void finalBoss_stage5_begin_snakeanim( entity snake );

float MAX_DISTANCE = 1000000;

float totalCreaturesKilled = 0;
float totalCreaturesAlive = 0;
float maxTotalCreaturesAlive = 3;
float maxTotalCreaturesKilled = 6;

float TOTAL_SPAWNERS = 16;						//How many spawners to choose from
float SPAWNER_RESET_TIME = 5;					//seconds a spawner has to wait before it can be chosen again

float nodeNum = 0;
float stageAtLastMove = 1;
float TOTAL_NODES = 7;
entity lastNodeChosen;

//from m10/m10_common.scr
void animActor ( entity e , string animation , string finishedAnim )
{
	if ( doesEntityExist ( e ) )
	{
		e.anim ( animation );
		waitforanimation ( e , animation );
		e.anim ( finishedAnim );
	}
}

#include "coop_mod/maps/main.scr"
#include "coop_mod/maps/global/global_common.scr"
#include "coop_mod/maps/missions/11/m11_beamInAmmo.scr"
#include "maps/global_scripts/global_debugutils.scr"
#include "maps/global_scripts/global_math.scr"
#include "coop_mod/maps/global/global_cinematicFX.scr"
#include "coop_mod/maps/missions/11/m11l3b_cin.scr"
#include "coop_mod/maps/optional_modules/randomplayer.scr"

//---------------------
void main()
//---------------------
{
	soundtrack("music/m11l3b-drull_ruins3_boss.mus");
	thread setupWorld();

//Co-Op
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
	coop_string_nextMapToCheck			= "secret1";//set the map we gona load next while we are in testmode
//Set spawnangles for this level
	coop_float_spawnAngle0 				= 270;
	coop_vector_spawnOrigin8 			= '404 6831 -695';
	coop_vector_spawnOrigin7 			= '330 6831 -695';
	coop_vector_spawnOrigin6 			= '260 6831 -695';
	coop_vector_spawnOrigin5 			= '190 6831 -695';
	coop_vector_spawnOrigin4 			= '120 6831 -695';
	coop_vector_spawnOrigin3 			= ' 50 6831 -695';
	coop_vector_spawnOrigin2 			= '-20 6831 -695';
	coop_vector_spawnOrigin1 			= '-90 6831 -695';
//Definie Objective
	coop_string_objectiveItem1			= "StopCommander";
	coop_string_objectiveItem2			= "DefeatUberMorph";
 //definie weapons
	coop_string_weapon1 = "models/weapons/worldmodel-BurstRifle.tik";
	coop_string_weapon2 = "models/weapons/worldmodel-Phaser-stx.tik";
	coop_string_weapon3 = "models/weapons/worldmodel-Tricorder-stx.tik";
	coop_string_weapon4 = "models/weapons/worldmodel-FieldAssaultRifle.tik";
	coop_string_weapon5 = "models/weapons/worldmodel-GrenadeLauncher.tik";
	coop_string_weapon6 = "models/weapons/worldmodel-attrex-rifle.tik";
	coop_string_weapon7 = "models/weapons/worldmodel-photon.tik";
	if(getCvarInt("mp_modifier_instantKill") != 1)
		coop_string_weapon8 = "models/weapons/worldmodel-sniperrifle.tik";
//Start the Co-Op Script
	globalCoop_main();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
	setupAI();
	setupPlayer();
}

string coop_returnSTringPlayerTargetNameRandom()
{
	entity e;
	string sTargetname;
	e = globalCoop_randomplayer(1);
	if(doesEntityExist(e))
	{
		sTargetname = e.getTargetName();
	}
	
	return sTargetname+"";
}

void setupWorld()
{
	$world.entity_fade_dist( 18000 );
	$world.farplane_color( '.4 0.20 0.00' );
	$world.farplane( 15000 );
	$world.farplane_cull ( 1 );
	$world.farplane_fog ( 1 );
	
	$world.light_lightstyle ( "powerupDoorLight1" , "a" , 0 );
	$world.light_lightstyle ( "powerupDoorLight2" , "a" , 0 );
	$world.light_lightstyle ( "powerupDoorLight3" , "a" , 0 );
	$world.light_lightstyle ( "powerupDoorLight4" , "a" , 0 );

	$powerupDoorGreen1.hide ();
	$powerupDoorGreen2.hide ();
	$powerupDoorGreen3.hide ();
	$powerupDoorGreen4.hide ();
	// $t6.nottriggerable ();
	// $t8.nottriggerable ();
	
	$world.light_intensity( "flicker1", 0 );
	$world.light_lightstyle( "flicker1", "zxazcyazauwxazdaawtbzcya" );
	
	if(!cvar_bool_multiplayer){//Singleplayer
		stuffcmd ( "r_light_emphasize 100\n" );
	}
	else{
		thread globalCoop_class_setup("Medic",'614 2621 -900');
		thread globalCoop_class_setup("HeavyWeapons",'484 2479 -900');
		thread globalCoop_class_setup("Technician",'371 2347 -900');
		wait(10);
	}
}

void setupAI()
//----------------------------------------------------------------------
//do ai setup
//----------------------------------------------------------------------
{
	$finalboss.ai_off();
	$finalboss.hide();
	$finalboss.notsolid();
	$finalboss.touchtriggers( 0 );
	if(cvar_bool_multiplayer)//Multiplayer
		$finalboss.setSize('-100 -100 0','100 100 700');//-51-51 0,51 51 652.8
		
	$renegade_romulan.anim ( "suldok_sit" );
	$renegade_romulan.removeactorweapon ( "RomulanDisruptor" );
	$finalboss.killthread ( "finalBoss_killthread" );
/* 	$commanderPanel1.time ( 10 );
	$commanderPanel1.rotateY ( 4 );
	
	$commanderPanel2.time ( 10 );
	$commanderPanel2.rotateY ( 3 );
	$commanderPanel2.time ( 10 );
	$commanderPanel2.rotateY ( 5 ); */
}

void setupPlayer()
//----------------------------------------------------------------------
//setup cowboy
//----------------------------------------------------------------------
{
	waitForPlayer();
	if(!cvar_bool_multiplayer){
		//globalLoadout_AssignWeapons ( "m11l3b_drull_ruins3" );
		$player.loadobjectives ( "m11l3b-drull_ruins3" );
		wait(.1);
	}
	thread globalCoop_objectives_update("incomplete",1,1);	
	thread earthquakes ();
}


//============================================================================================== FINAL BOSS STUFF

void finalBoss_initNodes()
{
	float i;
	entity node;
	for ( i = 1 ; i <= TOTAL_NODES ; i++ )
	{
		node = getentity( "bossnode" + i );
		node.setfloatvar( "chosenLast", 0 );
	}
}

void finalBoss_watchHealthAndChangeStages();
void finalBoss_go()
{
	finalBoss_initNodes();

	spawn( "fx/fx-dummy.tik", "targetname", "lavashooter" );

	thread finalBoss_watchHealthAndChangeStages();

	$finalboss.hide();
	$finalboss.notsolid();
	$finalboss.touchtriggers( 0 );
	$finalboss.ai_on();
	
	if(!cvar_bool_multiplayer)
		$finalboss.attack( $player );

//I am perfection. You are flawed.
	globalCoop_dialog_play($finalboss,"m11l3/final_perf.mp3", 1, 10000 , 0);
//I live to eliminate the imperfect species.
	thread globalCoop_dialog_play($finalboss,"m11l3/final_elim.mp3", 1, 10000 , 0);
}


void finalBoss_incrementStage()
{
	float theStage;
	theStage = $finalboss.getstage();

	$finalboss.ai_off();

	if( theStage == 1 )
	{
		$finalboss.surface( "material12", "+nodraw" );
		forcemusic ( "aux2","action" );
	}
	else if( theStage == 2 )
	{
		$finalboss.surface( "material11", "+nodraw" );
		forcemusic ( "aux3","action" );
	}
	else if( theStage == 3 )
	{
		$finalboss.surface( "material10", "+nodraw" );
		forcemusic ( "aux3","action" );
	}

	incrementStageCinematic();

	$finalboss.gotonextstage();
	$finalboss.ai_on();
	if(!cvar_bool_multiplayer)
		$finalboss.attack( $player );

	killthread( "spawnWaves" );
	maxTotalCreaturesAlive = 8;
	thread spawnWaves ();
}

float FINAL_BOSS_MAX_HEALTH = 3500;		// I hate to do it this way, bug I'd hate adding another event to entity even more.
float FINAL_BOSS_HEALTH_STAGE1 = 2625; 	// 75%
float FINAL_BOSS_HEALTH_STAGE2 = 1750; 	// 50%
float FINAL_BOSS_HEALTH_STAGE3 = 875; 	// 25%

void finalBoss_watchHealthAndChangeStages()
{
	float h;
	float theStage;

	h = $finalboss.gethealth();

	// STAGE 1
	while( h > FINAL_BOSS_HEALTH_STAGE1 )
	{
		h = $finalboss.gethealth();
		wait( 0.1 );
	}
	finalBoss_incrementStage();

	// stage 2
	while( h > FINAL_BOSS_HEALTH_STAGE2 )
	{
		h = $finalboss.gethealth();
		wait( 0.1 );
	}
	finalBoss_incrementStage();


	// stage 3
	while( h > FINAL_BOSS_HEALTH_STAGE3 )
	{
		h = $finalboss.gethealth();
		wait( 0.1 );
	}
	finalBoss_incrementStage();

}

void finalBoss_arriveRandomNode()
{
	vector v;
	entity shooternode;
	float nodenum;

	wait( 0.3 );
	wait( 1 );
	$finalboss.solid();
	$finalboss.touchtriggers( 1 );

	v = $finalboss.getorigin();
	v_z++;
	$finalboss.warp( v );
	wait( 0.1 );
	$finalboss.show();

	shooternode = lastNodeChosen;
	while( shooternode == lastNodeChosen )
	{
		nodenum = 1 + randomint( TOTAL_NODES );
		shooternode = getentity( "bossnode" + nodenum );
		if ( shooternode.getstringvar ( "bridgeExploded" ) != "true" )
			shooternode = lastNodeChosen;	//try again if there's a bridge over the node
		wait ( .05 );
	}

	$lavashooter.warp( shooternode.getorigin() );
	wait( 0.05 );
	$lavashooter.projectileattackentity( "projectile/projectile-snake-lavaattack.tik",coop_returnSTringPlayerTargetNameRandom(), 50 );
	$lavashooter.playsound( "sound/weapons/whooshshort.wav", 1, 1, 400 );
	wait( 0.5 );
	$lavashooter.projectileattackentity( "projectile/projectile-snake-lavaattack.tik",coop_returnSTringPlayerTargetNameRandom(), 60 );
	$lavashooter.playsound( "sound/weapons/whooshshort.wav", 2, 1, 400 );
	wait( 0.5 );
	$lavashooter.projectileattackentity( "projectile/projectile-snake-lavaattack.tik",coop_returnSTringPlayerTargetNameRandom(), 70 );
	$lavashooter.playsound( "sound/weapons/whooshshort.wav", 3, 1, 400 );
	wait( 1.5 );
	$lavashooter.projectileattackentity( "projectile/projectile-snake-lavaattack.tik",coop_returnSTringPlayerTargetNameRandom(), 50 );
	$lavashooter.playsound( "sound/weapons/whooshshort.wav", 1, 1, 400 );
	wait( 0.5 );
	$lavashooter.projectileattackentity( "projectile/projectile-snake-lavaattack.tik",coop_returnSTringPlayerTargetNameRandom(), 60 );
	$lavashooter.playsound( "sound/weapons/whooshshort.wav", 2, 1, 400 );
	wait( 0.5 );
	$lavashooter.projectileattackentity( "projectile/projectile-snake-lavaattack.tik",coop_returnSTringPlayerTargetNameRandom(), 70 );
	$lavashooter.playsound( "sound/weapons/whooshshort.wav", 3, 1, 400 );
	wait( 1.5 );
	$lavashooter.projectileattackentity( "projectile/projectile-snake-lavaattack.tik",coop_returnSTringPlayerTargetNameRandom(), 50 );
	$lavashooter.playsound( "sound/weapons/whooshshort.wav", 1, 1, 400 );
	wait( 1.5 );
	$lavashooter.projectileattackentity( "projectile/projectile-snake-lavaattack.tik",coop_returnSTringPlayerTargetNameRandom(), 60 );
	$lavashooter.playsound( "sound/weapons/whooshshort.wav", 2, 1, 400 );
	wait( 1.5 );
	$lavashooter.projectileattackentity( "projectile/projectile-snake-lavaattack.tik",coop_returnSTringPlayerTargetNameRandom(), 70 );
	$lavashooter.playsound( "sound/weapons/whooshshort.wav", 3, 1, 400 );
}

entity chooseBossNodeClosestToPlayer ()
{
	vector playerOrigin;
	entity toReturn , node,ePlayer;
	float i,nodeDistance, lowestDistance;
	ePlayer = globalCoop_randomplayer(1);
	playerOrigin = ePlayer.getorigin();

	lowestDistance = MAX_DISTANCE;
	//go through all available nodes and find the one horizontally closest to the player

	for ( i = 1 ; i <= TOTAL_NODES ; i++ )
	{
		node = getentity ( "bossnode" + i );				//grab our node
		globalCommon_AssertEntity ( node , "chooseSpawnerClosestToPlayer(): $node" + i + " is null" );
		if ( node.getfloatvar ( "chosenLast" ) == 0 )
		{
			nodeDistance = globalMath_GetXYDistance ( node.getorigin (), playerOrigin );

			if ( nodeDistance < lowestDistance )
			{
				lowestDistance = nodeDistance;	//we've found a new lowest distance
				toReturn = node;
			}
		}
	}

	if( doesEntityExist( lastNodeChosen ) )
	{
		lastNodeChosen.setfloatvar ( "chosenLast" , 0 );
	}

	lastNodeChosen = toReturn;
	toReturn.setfloatvar ( "chosenLast" , 1 );
	return toReturn;
}

entity chooseBossNodeFarthestFromPlayer ()
{
	vector playerOrigin;
	entity toReturn , node,ePlayer;
	float i,nodeDistance, highestDistance;
	ePlayer = globalCoop_randomplayer(1);
	playerOrigin = ePlayer.getorigin ();

	highestDistance = 0;
	//go through all available nodes and find the one horizontally farthest from the player

	for ( i = 1 ; i <= TOTAL_NODES ; i++ )
	{
		node = getentity ( "bossnode" + i );				//grab our node
		globalCommon_AssertEntity ( node , "chooseSpawnerClosestToPlayer(): $node" + i + " is null" );
		if ( node.getfloatvar ( "chosenLast" ) == 0 )
		{
			nodeDistance = globalMath_GetXYDistance ( node.getorigin (), playerOrigin );

			if ( nodeDistance > highestDistance )
			{
				highestDistance = nodeDistance;	//we've found a new lowest distance
				toReturn = node;
			}
		}
	}

	if( doesEntityExist( lastNodeChosen ) )
	{
		lastNodeChosen.setfloatvar ( "chosenLast" , 0 );
	}

	lastNodeChosen = toReturn;
	toReturn.setfloatvar ( "chosenLast" , 1 );
	return toReturn;
}


void finalBoss_gotoRandomNode()
{
	entity thenode;
	float currentStage;
	string bridgeName;
	entity bridge;


	if(!doesEntityExist($finalboss))
		return;
		
	currentStage = $finalboss.getstage();
	if( stageAtLastMove != currentStage )
	{
		$finalboss.usebehaviorpackage( "snake_stage" + $finalboss.getstage() );
		stageAtLastMove = currentStage;
	}

	$finalboss.hide();
	$finalboss.notsolid();
	$finalboss.touchtriggers( 0 );
	wait( 0.2 );

	//if the closest node to the player is a bridge, choose it and collapse the bridge
	//otherwise, go to the node farthest away and do some distance attacks
	thenode = chooseBossNodeClosestToPlayer ();

	bridgeName = thenode.getstringvar ( "uservar1" );	//holds the basename of the bridge that this is under

	//give the player some warning before the bridge explodes
	if ( bridgeName!="" && thenode.getstringvar ( "bridgeExploded" ) != "true")
	{
		explodeBridge ( bridgeName );
		thenode.setstringvar ( "bridgeExploded" , "true" );	//mark it as exploded
	}
//	else
//		thenode = chooseBossNodeFarthestFromPlayer ();

	$finalboss.origin( thenode.getorigin() );
}

void explodeBridge ( string bridge )
{
	entity lavaBurst1,lavaBurst2,lavaBurst3,lavaBurst4;
	entity bridgeEnt,bridgeClip,quake,safetyTrigger;
	float i;
	string prefixname;

	lavaBurst1 = getentity ( bridge + "LavaBurst1" );
	lavaBurst2 = getentity ( bridge + "LavaBurst2" );
	lavaBurst3 = getentity ( bridge + "LavaBurst3" );
	lavaBurst4 = getentity ( bridge + "LavaBurst4" );

	for( i = 1; i <= 2; i++ )
	{
		prefixname = bridge + "_" + i + "_";
		disconnectAllPathNodesInGrid( prefixname, 2, 2 );
	}

	bridgeEnt = getentity ( bridge );
	bridgeClip = getentity ( bridge + "Clip" );
	safetyTrigger = getentity ( bridge + "SafetyTrigger" );


	quake = spawn ("func_earthquake" );

	triggerEntity ( lavaBurst1 );
	triggerEntity ( quake );
	wait ( .75 );
	triggerEntity ( lavaBurst2 );

	wait ( .5 );
	triggerEntity ( lavaBurst3 );
	triggerEntity ( quake );
	wait ( .5 );
	triggerEntity ( lavaBurst4 );

	wait ( 1 );
	$finalBoss.notsolid ();
	safetyTrigger.triggerable ();	//throw the player free
	triggerEntity ( quake );
	triggerEntity ( bridgeEnt );		//func_explodeobject
	bridgeClip.remove ();

	lavaBurst1.remove ();
	lavaBurst2.remove ();
	lavaBurst3.remove ();
	lavaBurst4.remove ();

	wait ( .3 );
	$finalBoss.solid ();
	safetyTrigger.remove ();


}

void finalBoss_fireHeatSeekers()
{
	if(doesEntityExist($lavashooter) != 1 || doesEntityExist($finalboss) != 1)
		return;
		
	$lavashooter.warp( $finalboss.getorigin() );
	wait( 0.05 );

	$lavashooter.projectileattackentity( "projectile/projectile-snake-lavaattack.tik",coop_returnClosestPlayerTargetName($lavashooter), 50 );
	$lavashooter.playsound( "sound/weapons/whooshshort.wav", 1, 1, 400 );
	$lavashooter.projectileattackentity( "projectile/projectile-snake-lavaattack.tik",coop_returnClosestPlayerTargetName($lavashooter), 60 );
	$lavashooter.playsound( "sound/weapons/whooshshort.wav", 2, 1, 400 );
	$lavashooter.projectileattackentity( "projectile/projectile-snake-lavaattack.tik",coop_returnClosestPlayerTargetName($lavashooter), 70 );
	$lavashooter.playsound( "sound/weapons/whooshshort.wav", 3, 1, 400 );
 }


void resetSpawner ( entity spawner )
{
	wait ( SPAWNER_RESET_TIME );
	spawner.setfloatvar ( "notChoosable" , 0.0 );
}

entity chooseSpawnerBetweenRangeFromPlayer ( float near, float far)
{
	vector playerOrigin;
	entity toReturn , spawner,ePlayer;
	float i,spawnerDistance, lowestDistance;
	ePlayer = globalCoop_randomplayer(1);
	playerOrigin = ePlayer.getorigin ();

	lowestDistance = near;
	//go through all available spawners and find the one horizontally closest to the player
	for ( i = 1 ; i <= TOTAL_SPAWNERS ; i++ )
	{
		spawner = getentity ( "spawner" + i );				//grab our spawner
		globalCommon_AssertEntity ( spawner , "^6chooseSpawnerClosestToPlayer(): $spawner" + i + " is null" );
		if ( spawner.getfloatvar ( "notChoosable" ) != 1 )		//don't bother checking if its not choosable
		{
			spawnerDistance = globalMath_GetXYDistance ( spawner.getorigin (), playerOrigin );
			if ( (spawnerDistance <= far) && (spawnerDistance >= near ))
			{
				lowestDistance = spawnerDistance;	//we've found a new lowest distance
				toReturn = spawner;
			}
		}
	}
	if ( doesEntityExist ( toReturn ))
		toReturn.setfloatvar ( "notChoosable" , 1 );	//flag it as in-use

	return toReturn;
}

entity chooseSpawnerClosestToPlayer ()
{
	vector playerOrigin;
	entity toReturn , spawner,ePlayer;
	float i,spawnerDistance, lowestDistance;
	ePlayer = globalCoop_randomplayer(1);
	playerOrigin = ePlayer.getorigin ();

	lowestDistance = MAX_DISTANCE;
	//go through all available spawners and find the one horizontally closest to the player
	for ( i = 1 ; i <= TOTAL_SPAWNERS ; i++ )
	{
		spawner = getentity ( "spawner" + i );				//grab our spawner
		globalCommon_AssertEntity ( spawner , "^6chooseSpawnerClosestToPlayer(): $spawner" + i + " is null" );
		if ( spawner.getfloatvar ( "notChoosable" ) == 0 )		//don't bother checking if its not choosable
		{
			spawnerDistance = globalMath_GetXYDistance ( spawner.getorigin (), playerOrigin );
			if ( spawnerDistance < lowestDistance )
			{
				lowestDistance = spawnerDistance;	//we've found a new lowest distance
				toReturn = spawner;
			}
		}
	}
	if ( doesEntityExist ( toReturn ))
		toReturn.setfloatvar ( "notChoosable" , 1 );	//flag it as in-use
	return toReturn;
}

void spawnWait ( entity spawner )
{
	if ( !doesEntityExist ( spawner ))
	{
		//print ( "^2No spawner\n" );
		return;
	}

	spawner.setspawnkeyvalue ( "hide" , "1" );
	spawner.setspawnkeyvalue ( "anim" , "lava-raise" );
	entity creature;
	if ( (totalCreaturesAlive + 1) < maxTotalCreaturesAlive )
	{
		creature = spawner.spawnnow ();
		wait ( .05 );
		if (doesEntityExist ( creature ))
		{
			creature.killthread ( "spawnWavesKillThread" );
			creature.ai_off ();
			creature.notsolid ();
			creature.anim ( "lava-raise" );
			creature.show ();
			waitforanimation ( creature , "lava-raise" );
			globalCoop_actor_healthMultiplicatePerPlayer(creature);
			creature.solid ();
			creature.ai_on ();

			totalCreaturesAlive ++;
		}
	}
	thread resetSpawner ( spawner );
}

float currentCommanderLine = 1;
float currentBossLine = 1;

void randomCommanderDialog ()
{
	while ( isActorAlive ( "renegade_romulan" ))
	{
		if (currentCommanderLine == 1 )
		{
			//This is a fight you cannot hope to win.
			globalCoop_dialog_play($renegade_romulan,"m11l3/renrom_hopewin.mp3", 1, 80000, 0	);
			currentCommanderLine++;
		}
		else if ( currentCommanderLine == 2 )
		{
			//Your luck has abandoned you.
			globalCoop_dialog_play($renegade_romulan,"m11l3/renrom_luck.mp3", 1, 80000, 0);
			currentCommanderLine++;
		}
		else if ( currentCommanderLine == 3 )
		{
			//Surrender, and we promise to show you mercy.
			globalCoop_dialog_play($renegade_romulan,"m11l3/renrom_surr.mp3", 1, 80000, 0);
			currentCommanderLine++;
		}
		else if ( currentCommanderLine == 4 )
		{
			//Kill him, you brainless Exomorphs!
			globalCoop_dialog_play($renegade_romulan,"m11l3/renrom_brainless.mp3", 1, 80000, 0);
			currentCommanderLine++;
		}
		wait ( randomfloat ( 10 ) + 8 );
	}
}

void bossDialog ()
{
	float theStage;

	theStage = $finalboss.getstage();

	if (currentBossLine == 1 )
	{
		globalCoop_dialog_stop($munro);
		//You weaken, but I am eternal. I am perfection.
		globalCoop_dialog_play($finalboss,"m11l3/final_eternal.mp3", 1, 10000 , 0);
		//You're just another bug.
		globalCoop_dialog_play($munro,"m11l3/munro_justbug.mp3", 1, 10000 , 0);
		currentBossLine++;
	}
	else if ( currentBossLine == 2 )
	{
		globalCoop_dialog_stop($munro);
		//Your attacks only create more of my warriors! I am perfection!
		globalCoop_dialog_play($finalboss,"m11l3/final_more.mp3", 1, 10000 , 0);
		//You're still getting smaller!
		globalCoop_dialog_play($munro,"m11l3/munro_smaller.mp3", 1, 10000 , 0);
		currentBossLine++;
	}
	else if ( currentBossLine == 3 )
	{
		globalCoop_dialog_stop($munro);
		//You have competence, but not perfection. You will fail.
		globalCoop_dialog_play($finalboss,"m11l3/final_comp.mp3", 1, 10000 , 0);
		//You're just a toy of the Idryll!
		globalCoop_dialog_play($munro,"m11l3/munro_toy.mp3", 1, 10000 , 0);
/*		//Ha! I crushed the Idryll! They are extinct!
		globalCoop_dialog_play($finalboss,"m11l3/final_extinct.mp3", 1, 10000 , 0);
		//You failed at that, too. Not so perfect, are you?
		globalCoop_dialog_play(globalCoop_return_entityE1OrE2(globalCoop_randomplayer(1),$munro),"m11l3/munro_failed.mp3", 1, 10000 , 0);
*/
		currentBossLine++;
	}
}

void spawnWaves ()
{
	entity spawner1,spawner2,spawner3;

	totalCreaturesKilled = 0;

	while ( (totalCreaturesKilled < maxTotalCreaturesKilled))
	{
		spawner1 = chooseSpawnerBetweenRangeFromPlayer (512,1024);
		spawner2 = chooseSpawnerBetweenRangeFromPlayer (512,1024);
		spawner3 = chooseSpawnerBetweenRangeFromPlayer (512,1024);

		thread spawnWait ( spawner1 );
		wait( 0.5 );
		thread spawnWait ( spawner2 );
		wait( 0.5 );
		thread spawnWait ( spawner3 );
		wait( 1 );

		while ( (totalCreaturesAlive >= maxTotalCreaturesAlive))
			wait ( .5 );

		wait ( 4 );
	}
}

void spawnWavesKillThread ()
{
	entity e;
	e=getcurrententity ();

	totalCreaturesKilled ++;
	totalCreaturesAlive --;

	print ( e.gettargetname () + " " + totalCreaturesKilled + " ::: " + totalCreaturesAlive + "\n" );
}

void runPowerupConsoles ()
{
	float currentConsole = 1;
	entity door,consoles,indicatorRed, indicatorGreen;

	while ( 1 )
	{
		door = getentity ( "powerupDoor" + currentConsole );
		consoles = getentity ( "powerupDoorTerminals" + currentConsole );
		indicatorRed = getentity ( "powerupDoorRed" + currentConsole );
		indicatorGreen = getentity ( "powerupDoorGreen" + currentConsole );

		$world.light_lightstyle ( "powerupDoorLight" + currentConsole , "z" , 0 );
		indicatorRed.hide ();
		indicatorGreen.show ();

		door.time ( 2 );
		door.playsound ( "sound/doors/drull_smldoor_01.wav" , 3 , .7 , 512 );

		door.movedown ( 116 );
		waitfor ( door );
		door.stopsound ();
		door.playsound ( "sound/doors/drull_smldoor_stop_01.wav" , 3 , .7 , 512 );
		wait ( 15 );

		$world.light_lightstyle ( "powerupDoorLight" + currentConsole , "a" , 0 );
		indicatorRed.show ();
		indicatorGreen.hide ();

		wait ( 3 );

		door.time ( 2 );
		door.playsound ( "sound/doors/drull_smldoor_01.wav" , 3 , .7 , 512 );
		door.moveup ( 116 );
		waitfor ( door );

		door.stopsound ();
		door.playsound ( "sound/doors/drull_smldoor_stop_01.wav" , 3 , .7 , 512 );

		currentConsole ++;
		if ( currentConsole == 5 )
			currentConsole = 1;
	}
}


//random earthquakes + debris
void earthquakes ()
{
	entity quake,debris,ePlayer;
	vector _origin,forward;
	float fX, fY, fZ, sign;
	float ramdomQuakeIntensity;
	float randomQuakeLength;
	
	quake = spawn ( "func_earthquake" , "targetname" , "rockDebrisQuake" );

	while ( 1 )
	{
		ePlayer = globalCoop_randomplayer(1);
		wait ( randomfloat ( 10 ) + .05 );
		_origin = ePlayer.getorigin();
		quake.origin ( _origin );

		ramdomQuakeIntensity = randomFloat( .5 ) + .1;
		randomQuakeLength = randomFloat( .4 ) + .4;

		quake.duration( ramdomQuakeIntensity );
		quake.magnitude( ramdomQuakeIntensity );

		triggerentity ( quake );

		wait ( .25 );

		debris = spawn ( "script_model" ,
						 "model" , "models/fx/fx-explosion-debris-rocks-dust-brown.tik",
						 "angles" , "-90 0 0" );
		forward = vectorforward ( ePlayer.getangles() );

		fX = vectorgetx ( forward );
		fY = vectorgety ( forward );

		if ( randomint ( 2 ) == 1 )
		{
			sign = -1;
			fX *= -1;
		}

		fX *= randomfloat ( 1024 );
		fY *= randomfloat ( 1024 );

		fX += vectorgetx ( _origin );
		fY += vectorgety ( _origin );

		fX += ( sign * 256 );

		fZ = vectorgetz ( _origin );
		fZ += 1024;

		forward = _origin;
		_origin = vectorsetx ( _origin , fX );
		_origin = vectorsety ( _origin , fY );
		_origin = vectorsetz ( _origin , fZ );
		debris.origin ( _origin );
	}
}

void lavaJet ()
{
	entity caller,jet;
	vector v;

	caller = getcurrententity ();

	jet = spawn ( "script_model" );
	wait ( .05 );
	v = caller.getorigin ();

	v_z += 150;

	jet.origin ( v );

	wait ( .8 );
	jet.model ( "models/fx/fx-explosion-lavaburst-creature.tik" );

	wait ( 2 );
	jet.remove ();
}

void finalBoss_stage5_begin_snakeanim( entity snake )
{
	snake.anim( "stage4-end" );
	waitforanimation( snake, "stage4-end" );
	snake.remove();
}

void tryToRemoveAllMonsters()
{
	float f;
	stuffcmd ( "removeclass Projectile\n" );

	for( f = 0; f < 4; f++ )
	{
		killthread( "spawnWaves" );
		killthread( "spawnWait" );
		removeactorsnamed( "Crab" );
		wait( 0.5 );
	}
}


void lavaBursts ()
{
	while ( 1 )
	{
		globalCoop_level_triggerEntity($finalLavaburst6);
		wait ( randomint ( 2 ));
		globalCoop_level_triggerEntity($finalLavaburst7);
		wait ( randomint ( 3 ));
		globalCoop_level_triggerEntity($finalLavaburst8);
		wait ( randomint ( 3 ));
	}

}


void rotatePanelUp ( entity panel , float num )
{
	panel.time ( 3 );
	panel.setfloatvar ( "open" , 1 );
	if ( num == 1 )
	{
		panel.rotateZup ( 90 );
	}
	else if ( num == 2 )
	{
		panel.rotateZup ( 90 );
		panel.rotateYDown ( 45 );
	}
	else if ( num == 3 )
	{
		panel.rotateZup ( 90 );
		panel.rotateYUp ( 45 );
	}
	waitfor ( panel );
}

void rotatePanelDown ( entity panel , float num )
{
	panel.time ( 3 );
	if ( num == 1 )
	{
		panel.rotateZdown ( 90 );
	}
	else if ( num == 2 )
	{
		panel.rotateZdown ( 90 );
		panel.rotateYup ( 45 );
	}
	else if ( num == 3 )
	{
		panel.rotateZdown ( 90 );
		panel.rotateYdown ( 45 );
	}
	waitfor ( panel );
	panel.setfloatvar ( "open" , 0 );
}

void shieldPanelDisabled ()
{
	entity caller,panel,photonEmitter;
	float i,num;

	//stored on our trigger_multiple
	caller = getcurrententity ();

	if ( caller.gethealth () <= 0 )
	{
		caller.notsolid ();
		num = caller.getfloatvar ( "uservar1" );

		panel = getentity ( "shieldPanel" + num);
		photonEmitter = getentity ( "photonEmitter" + num );

		maxTotalCreaturesAlive = 3;
		thread spawnWaves ();

		//raise the shield panel
		rotatePanelUp ( panel , num );
		panel.notsolid ();

		//fire a few volleys at the player
		for ( i = 0 ; i < 4 ; i++ )
		{
			photonEmitter.projectileattackentity ("models/projectile/projectile_rom-photonball-boss.tik",coop_returnSTringPlayerTargetNameRandom(),10,5);
			wait ( 1.5 );
		}

		wait ( 2 );

		panel.solid ();
		//reset shield panel
		rotatePanelDown ( panel, num );

		caller.solid ();
		caller.health ( 100 );
	}
	thread globalCommon_OnDamage ( caller , "shieldPanelDisabled" );
}

void shieldPanelOpen ( float num)
{
	entity panel,photonEmitter;
	float i;

	panel = getentity ( "shieldPanel" + num);
	photonEmitter = getentity ( "photonEmitter" + num );

	maxTotalCreaturesAlive = 2;
	thread spawnWaves ();

	//raise the shield panel
	rotatePanelUp ( panel , num );
	panel.notsolid ();

	$renegade_romulan.anim ( "suldok_buttons" );
	waitforanimation ( $renegade_romulan , "suldok_buttons" );
	$renegade_romulan.anim ( "suldok_sit" );

	//fire a few volleys at the player
	for ( i = 0 ; i < 4 ; i++ )
	{
		photonEmitter.projectileattackentity (  "models/projectile/projectile_rom-photonball-boss.tik" , coop_returnSTringPlayerTargetNameRandom() , 10 , 5 );
		wait ( 1.5 );
	}

	wait ( 2 );

	panel.solid ();
	//reset shield panel
	rotatePanelDown ( panel, num );
}
void monitorCommanderHealth ()
{
	spawn ( "Actor" , "targetname" , "fakeboss" , "Name" , "$$RenegadeCommander$$"  );
	wait ( .05 );

	$fakeboss.maxbosshealth ( 500 );
	$fakeboss.updatebosshealth ( 1 );
	$fakeboss.ai_on();


	while ( $renegade_romulan.gethealth() > 1 )
	{
		wait ( .25 );
		$fakeboss.health ( $renegade_romulan.gethealth () );
	}
	$fakeboss.health ( $renegade_romulan.gethealth () );
//make the hud go away
	$fakeboss.ai_Off();
	globalCoop_level_remove($fakeboss);


	killthread ( "runShieldPanelAttack" );
	thread commanderDestroyedCinematic();
}
void runShieldPanelAttack ()
{
	float i = 1;
	$renegade_romulan.health ( 500 );
	$renegade_romulan.addcustomthread ( "damaged" , "commanderPain" );

	thread monitorCommanderHealth ();
	while ( 1 )
	{
		$renegade_romulan.solid ();
		shieldPanelOpen ( i );
		$renegade_romulan.notsolid ();
		wait ( 2 );
		i++;
		if ( i > 3 )
			i = 1;
	}
}

void commanderPain ()
{
	if($renegade_romulan.gethealth() > 1){
		$renegade_romulan.anim ("suldok_death");
		wait (.45);
		$renegade_romulan.anim ("suldok_sit");
	}
}

// disconnects two path nodes from eachother where the two nodes are members of a properly named grid.
// all nodes' targetnames must be formed with a basename (like "hallnode") followed with a number.
// number nodes starting at 1 (NOT '01'), and number them top-down, left right (so 2 will be on the next row, one down; NOT
//	on the next column, one over)
void disconnectPathNodesInGrid( string basename, float width, float height, float colA, float rowA, float colB, float rowB )
{
	float indexA;
	float indexB;
	string nameA;
	string nameB;

	if( rowA < 0 || rowB < 0 || colA < 0 || colB < 0 )
		return;
	if( rowA >= height || rowB >= height || colA >= width || colB >= width )
		return;

	indexA = (colA * height) + rowA + 1;
	indexB = (colB * height) + rowB + 1;

	nameA = basename + indexA;
	nameB = basename + indexB;

	disconnectPathNodes( nameA, nameB );
	disconnectPathNodes( nameB, nameA );
	//print( indexA + "," + indexB + ": " + nameA + " - " + nameB + "\n" );
}

void disconnectAllPathNodesInGrid( string basename, float width, float height )
{
	float col;			// loop counter
	float row;			// loop counter
	float width;		// how many nodes there are in the grid
	float height;		// how many columns there are in the grid
	string basename;	// the prefix targetname of all the pathnodes

	for( col = 0; col < width; col++ )
	{
		for( row = 0; row < height; row++ )
		{
			disconnectPathNodesInGrid( basename, width, height, col, row, col + 1, row - 1 );	// ne
			disconnectPathNodesInGrid( basename, width, height, col, row, col + 1, row );		// e
			disconnectPathNodesInGrid( basename, width, height, col, row, col + 1, row + 1 );	// se

			disconnectPathNodesInGrid( basename, width, height, col, row, col, row - 1 );		// n
			disconnectPathNodesInGrid( basename, width, height, col, row, col, row + 1 );		// s

			disconnectPathNodesInGrid( basename, width, height, col, row, col - 1, row - 1 );	// nw
			disconnectPathNodesInGrid( basename, width, height, col, row, col - 1, row );		// w
			disconnectPathNodesInGrid( basename, width, height, col, row, col - 1, row + 1 );	// sw
		}
	}
}


/* void finalBoss ()
{
	$finalboss.ai_off ();
	$finalboss.warp( '0.38 3746.42 -1105.88' );
	$finalboss.angles ( '0.00 104.79 0.00' );
	$finalboss.show();
	$finalboss.anim ( "raise" );
	waitforanimation ( $finalboss , "raise" );
	$finalboss.anim ( "dropdown" );
	wait(.3);
	$finalboss.hide();
} */

void finalBossTransition ()
{
	$finalboss.anim ( "dropdown" );
	$finalboss.show();
	$finalboss.origin ( '0.38 3746.42 -1105.88' );
	$finalboss.angles ( '0.00 104.79 0.00' );
}

float firstTime = 0;
void finalBossDeath ()
{
	if ( firstTime == 0 )
	{
		spawn ( "Actor" , "model" , "models/char/hazardteam_munro.tik" , "ai_off" , "1" , "targetname" , "asdf" );
		wait ( .05 );
		firstTime = 1;
	}

	$finalboss.show ();
	$finalboss.origin ('-160.38 4246.42 -1140.88' );
	$finalboss.angles ( '0.00 104.79 0.00' );
	$finalboss.anim( "stage4-end" );

	$asdf.origin ( '-252.71 4646.12 -1055.96' );
	$asdf.angles ( '0 300 0' );
}

void suldok()
{
	$renegade_romulan.anim ( "suldok_pain" );
	wait ( 1 );

	//The Master Control Facility is stuck in first gear. You need thousands of Exomorphs, and you only have a handful.
	//globalCoop_dialog_play(globalCoop_return_entityE1OrE2(globalCoop_randomplayer(1),$fakeplayer),"m11l3/munro_stuck.mp3", 1, 80000, 0);
	globalCoop_dialog_play($munro,"m11l3/munro_stuck.mp3", 1, 80000, 0);

	//I only need one.
	thread globalCoop_dialog_play($renegade_romulan,"m11l3/renrom_one.mp3", 1, 80000, 0);
	$renegade_romulan.animateonce  ( "suldok_one" );
}


string coop_returnClosestPlayerTargetName(entity eCloseToMe)
//------------------------------------------------------------------------------
//mix some code meal for the script
//------------------------------------------------------------------------------
{
	if(doesEntityExist(eCloseToMe)){
		eCloseToMe = globalCoop_return_playerClosestPreferActive(eCloseToMe);
		if(doesEntityExist(eCloseToMe))
		{
			string sTargatname;
			sTargatname = eCloseToMe.getTargetname();
			if(sTargatname != "")
			{
				return sTargatname+"";
			}
		}
	}
	
	return "$world";
}


void coop_endLevel()
//------------------------------------------------------------------------------
//Level end
//------------------------------------------------------------------------------
{
	thread globalCoop_mission_completed("m12-end");
}



