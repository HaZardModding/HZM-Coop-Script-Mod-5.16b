//-----------------------------------------------------------------------------------
// Script By:		Christian Sebastian Strahl (Chrissstrahl)
// Created on:		2008.27.08
// E-Mail:			chrissstrahl@yahoo.de
// Organisation:	HaZardModding
//
// PUZZLES - INCLUDE IF YOU NEED IT'S EXTRA FEATURES, INCLUDE ONLY TO THE CURRENT LEVEL SCRIPT!!

//HAZARDMODDING CO-OP SCRIPT MODIFICATION ©2006-2012 SOME RIGHTS RESERVED AND
//(IP)INTELLECTUAL PROPERTY HELD BY CHRISTIAN SEBASTIAN STRAHL, ALIAS CHRISSSTRAHL.

//YOU ARE EXPLICITE FORBIDDEN TO USE/MODIFIE/REDISTRIBUTE/REPLICATE/RELEASE/REBUILD/COPY
//ANY MATERIALS OR INTELLECTUAL PROPERTY OF THIS FILE WITHOUT THE EXPLICIT
//WRITTEN PERMISSION OF THE RESPECTIVE OWNERS!

//
//CONTACT: chrissstrahl@yahoo.de [Christian Sebastian Strahl, Germany]
//-----------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
//DECLARATIONS
////////////////////////////////////////////////////////////////////////////////
void globalCoop_puzzle_add(string sTargetname , string sTheadToStart , float fTimeToSolve , vector vOrigin);
void globalCoop_puzzle_replace(entity ePuzzleObjectToReplace,string sTheadToStart,float fTimeToSolve);
void globalcoop_puzzle_timer(entity ePlayer,entity ePuzzleObject,float fTime);
void globalCoop_puzzle_playerCloseIn();
void globalCoop_puzzle_modulate();
void globalCoop_puzzle_extendModulatingRange(entity ePuzzle, float fExtend);
void globalCoop_puzzle_modelClose(entity ePuzzle,string sCloseAnim,string sIdleAnim);


////////////////////////////////////////////////////////////////////////////////
//FUNCTIONS
////////////////////////////////////////////////////////////////////////////////
void globalCoop_puzzle_setVars(entity ePuzzleObject,string sTargetname,string sTheadToStart,float fTimeToSolve,float fRange)
//----------------------------------------------------------------------
// Adds Puzzle Objets with multiplayer compatible script varaint
//----------------------------------------------------------------------
{
	if(doesEntityExist(ePuzzleObject))
	{
		ePuzzleObject.setFloatvar("globalCoop_puzzle_solved",0);
		ePuzzleObject.setFloatvar("globalCoop_puzzle_process",0);
		ePuzzleObject.setFloatVar("globalCoop_puzzle_range",fRange);
		ePuzzleObject.setFloatvar("globalCoop_puzzle_timeToSolve",fTimeToSolve);
		ePuzzleObject.setStringVar("globalCoop_puzzle_targetname",sTargetname);
		ePuzzleObject.setStringVar("globalCoop_puzzle_solveThread",sTheadToStart);
	}
}


void globalCoop_puzzle_add(string sTargetname , string sTheadToStart , float fTimeToSolve , vector vOrigin)
//----------------------------------------------------------------------
// Adds Puzzle Objets with multiplayer compatible script varaint
//----------------------------------------------------------------------
{
	string sClass,sThreadMethode,sThread;
	sClass			= "puzzle_object";
	sThreadMethode	= "puzzleobject_solvedthread";
	sThread			= sTheadToStart;
	if(cvar_bool_multiplayer){
		sClass			= "trigger_multiple";
		sThreadMethode	= "thread";
		sThread			= "globalCoop_puzzle_modulate";
	}
//Create Vars
	entity eTriggerMultipleCloseInTricorder;
//Spawn the new modulator thing
	eTriggerMultipleCloseInTricorder = spawn(sClass,"targetname",sTargetname,sThreadMethode,sThread,"origin",""+vOrigin);
	globalCoop_main_waitAFrame();
//Set correct size on the new entity
	eTriggerMultipleCloseInTricorder.setSize('-50 -50 -128','50 50 128');
	if(!cvar_bool_multiplayer)
	{
		eTriggerMultipleCloseInTricorder.puzzleobject_timetouse(fTimeToSolve);
		eTriggerMultipleCloseInTricorder.puzzleobject_itemtouse("Tricorder");
	}
//Set vars
	globalCoop_puzzle_setVars(eTriggerMultipleCloseInTricorder,sTargetname,sTheadToStart,fTimeToSolve,65);
}


void globalCoop_puzzle_replace(entity ePuzzleObjectToReplace,string sTheadToStart,float fTimeToSolve)
//----------------------------------------------------------------------
// Replace Puzzle Objets with multiplayer compatible script varaint
//----------------------------------------------------------------------
{
//MULTIPLAYER + PUZZLE EXISTS
	if(cvar_bool_multiplayer == 1 && doesEntityExist(ePuzzleObjectToReplace) == 1){
		entity	ePuzzleObject;
		entity	eTriggerMultipleCloseIn;
		entity	eTriggerMultipleCloseInTricorder;
		vector 	vMins;
		vector 	vMaxs;
		vector 	vOrigin;
		vector 	vAngles;
		string 	sModel;
		string 	sTargetname;
		float	fRange;
		float	fMaxsY;
		float	fMaxsX;

			sTargetname		= ePuzzleObjectToReplace.getRawTargetname();
			vMins			= ePuzzleObjectToReplace.getMins();
			vMaxs			= ePuzzleObjectToReplace.getMaxs();
			vOrigin			= ePuzzleObjectToReplace.getorigin();
			vAngles			= ePuzzleObjectToReplace.getAngles();
			sModel			= ePuzzleObjectToReplace.getmodelname();

			wait(.2);
			globalCoop_level_remove(ePuzzleObjectToReplace);
			
		//Calculate modulating Range	
			fMaxsY = vectorgetY(vMaxs);
			fMaxsX = vectorgetX(vMaxs);
			
			if(fMaxsY > fMaxsX)
				fRange = fMaxsX;
			else
				fRange = fMaxsY;

		//remove useless vars
			removeVar(fMaxsY);
			removeVar(fMaxsX);

		//Correct minimum value
			if(fRange < 65)
				fRange=65;
			
		//CHECK TO SPAWN A VALID MODEL
			if(sModel == ""){
				sModel = "fx/fx-dummy.tik";
			}
			
			ePuzzleObject = spawn("script_model","model",sModel,"targetname",sTargetname,"origin",""+vOrigin);
			
			eTriggerMultipleCloseIn				= spawn("trigger_multiple","targetname",sTargetname+"MultipleCloseIn","thread","globalCoop_puzzle_playerCloseIn","origin",""+vOrigin);
			eTriggerMultipleCloseInTricorder	= spawn("trigger_multiple","targetname",sTargetname+"MultipleCloseInTricorder","thread","globalCoop_puzzle_modulate","origin",""+vOrigin);
			globalCoop_main_waitZeroDot2();
		//Set correct sizePlayeron the new entity
			ePuzzleObject.setSize(vMins,vMaxs);
			eTriggerMultipleCloseIn.setSize('-140 -140 -128','140 140 128');
			eTriggerMultipleCloseInTricorder.setSize('-40 -40 -128','40 40 128');

		//SET IDLE ANIM, APPLAY ORGINAL ANGLES
			ePuzzleObject.anim("idle");
			ePuzzleObject.angles(vAngles);
			ePuzzleObject.notsolid(); //networkDetail			
		//SET VARS
			globalCoop_puzzle_setVars(ePuzzleObject,sTargetname,sTheadToStart,fTimeToSolve,fRange);
			eTriggerMultipleCloseIn.setStringVar("globalCoop_puzzle_targetname",sTargetname);
			eTriggerMultipleCloseInTricorder.setStringVar("globalCoop_puzzle_targetname",sTargetname);
		//On Touch
			///if(ePuzzleObject.getModelName() != ""){
			thread globalCoop_level_onUse(ePuzzleObject,"globalCoop_puzzle_modulate");
	}
}


void globalcoop_puzzle_timer(entity ePlayer,entity ePuzzleObject,float fTime)
//----------------------------------------------------------------------
// Displays the tricorder modulating-bar at the Modulating Player
//----------------------------------------------------------------------
{
//EXIT IF DUDE OR TRIGGER IS MISSING
	if(globalCoop_check_existingLivingEntity(ePlayer) != 1 || doesEntityExist(ePuzzleObject) != 1)
		return;
		
//TRICODER FLOATING ROTATING MODEL ENTITY
	entity eFloatingTricorder;

//SPAWN TRICORDER, WILL BE ROTATED ABOVE THE PUZZLE WHILE MODULATING
	ePlayer.setstat("generic",0);
	ePlayer.setFloatVar("globalCoop_modulatingPuzzle",1);
	eFloatingTricorder = spawn("script_model","model","weapons/worldmodel-tricorder-STX.tik", "scale",".001","angles","-70 0 0");	

//SPEED UP THE PROCESS FOR TECH-CLASS
	if(ePlayer.getStringVar("globalCoop_className") == "Technician" && cvar_bool_coop_techOnly != 1)
	{
		fTime=4;
	}
	
//SEND 100 UPDATES WITHIN THIS MINIMUM TIME (4sec)
	if(fTime < 4)
	{
		fTime=4;
	}
		
float	fCountdownTimer;
float	fCountdownTime;

//Get the time for adding the next level to the timer hud
	fCountdownTime	= fTime / 100;
	
//Make Player use Tricorder if he is not allready doing so
	while(fCountdownTimer<30)
	{
		ePlayer.use("Tricorder-STX");
		ePlayer.use("Tricorder");
		ePlayer.use("Tricorder-rom");
		globalCoop_main_waitAFrame();
		fCountdownTimer++;
		
		if(globalCoop_check_activeWeaponType(ePlayer,"Tricorder"))
		{
			fCountdownTimer=30;
		}
	}
//reset!!!
	fCountdownTimer=0;

	if(globalCoop_check_activeWeaponType(ePlayer,"Tricorder"))
	{
		string sModel;
		sModel="weapons/worldmodel-Tricorder.tik";
		
//Avoid player to switch weapon
		ePlayer.disableuseweapon(1);
		ePlayer.stopfire( "dual" );
		
		thread globalCoop_huds_Remove(ePlayer,ePuzzleObject.getStringVar("coop_puzzle_removeHudWhileModulating"));
		
//animate tricorder
		ePlayer.weaponcommand("dual","anim","fire");
		
		if(ePlayer.getActiveWeaponName() == "Tricorder-rom")
		{
			ePlayer.addhud("romtimerhud");
			sModel="weapons/worldmodel-rom-datapad.tik";
		}
		else
		{
			ePlayer.addhud("timerhud");
		}
//SETUP FLOATING TRICORDER
		if(doesEntityExist(eFloatingTricorder))
		{
			//eFloatingTricorder.loopSound(sSound,4,1024);	
			eFloatingTricorder.model(sModel);
			eFloatingTricorder.notsolid();
			vector 	vPlayerModulating;
			vPlayerModulating = ePlayer.getOrigin();
			vPlayerModulating_z += 120;
			eFloatingTricorder.origin(vPlayerModulating);
			eFloatingTricorder.rendereffects( "+minlight" );
			eFloatingTricorder.scale(4);
			eFloatingTricorder.rotateY(70);			
		}
	}
//Create vars
float	fDistancePlayerToPuzzle;
float 	fRange;
vector	vDistance;
vector	vOriginPlayer;
vector	vOriginPuzzle;
	
//retrive information
	vOriginPuzzle	= ePuzzleObject.getOrigin();
	fRange 			= ePuzzleObject.getFloatVar("globalCoop_puzzle_range");
	fCountdownTimer = ePuzzleObject.getFloatvar("globalCoop_puzzle_process");
	
	while(	doesEntityExist(ePlayer) )
	{
	//retrive information
		vOriginPlayer	= ePlayer.getOrigin();
	//correct ofset (player is carring the origin at his feets, and is 128 units height)
		vOriginPlayer_z += 64;
	//Calculate
		vDistance 				= vOriginPuzzle - vOriginPlayer;
		fDistancePlayerToPuzzle	=  vectorlength( vDistance );

//check distance,timmer is finished,and active weapon
		if(	globalCoop_check_activeWeaponType(ePlayer,"Tricorder") != 1 ||
			fCountdownTimer >= 100 || fDistancePlayerToPuzzle > fRange
			)
		{
			if(doesEntityExist(ePlayer))
			{
				ePlayer.weaponcommand("dual","anim","idle");
				ePlayer.removehud("timerhud");
				ePlayer.removehud("romtimerhud");
				globalCoop_main_waitAFrame();
				ePlayer.disableuseweapon(0);
				ePlayer.setFloatVar("globalCoop_modulatingPuzzle",0);
				if(fCountdownTimer >= 100)
				{
					ePlayer.setFloatVar("coop_puzzle_hasSolved_"+ePuzzleObject.getRawTargetname(),1);
					ePlayer.setFloatVar("globalCoop_puzzle_solvedTime",(getLevelTime() + 12));
					thread globalCoop_huds_Add(ePlayer,ePuzzleObject.getStringVar("coop_puzzle_addHud"));
					thread globalCoop_huds_Add(ePlayer,ePuzzleObject.getStringVar("coop_puzzle_removeHudWhileModulating"));
					thread globalCoop_huds_Remove(ePlayer,ePuzzleObject.getStringVar("coop_puzzle_removeHud"));
				}
			}
			if(doesEntityExist(ePuzzleObject))
			{
				ePuzzleObject.stopLoopSound();
				if(fCountdownTimer >= 100)
				{
					if(ePuzzleObject.getFloatvar("globalCoop_puzzle_solved") == 0)
					{
						ePuzzleObject.setFloatvar("globalCoop_puzzle_solved",1);
						ePuzzleObject.playsound ( "sound/weapons/tricorder/tri_puzz_success.wav",3,1,394);
					}
				}
			}			
			if(ePuzzleObject.getFloatVar("coop_puzzle_resetState") != 1)
			{
				ePuzzleObject.setFloatvar("globalCoop_puzzle_process",fCountdownTimer);
			}

		//TIMER STOPPED, REMOVE TRICODER ROTATING MODEL
			globalCoop_level_remove(eFloatingTricorder);
			
		//EXIT THIS FUNCTION NOW
			return;
		}		
//EXIT IF DUDE IS MISSING
		if(!globalCoop_check_existingLivingEntity(ePlayer))
		{
		//TIMER STOPPED, REMOVE TRICODER ROTATING MODEL
			globalCoop_level_remove(eFloatingTricorder);	
			return;
		}

//UPDATE MODULATION BAR
		ePlayer.setstat("generic",fCountdownTimer);
		wait(fCountdownTime);
		fCountdownTimer++;
	}
//TIMER STOPPED, REMOVE TRICODER ROTATING MODEL
	globalCoop_level_remove(eFloatingTricorder);
	
//REMEMBER LAST MODULATION STATUS IF NOT DISABLED
	if(ePuzzleObject.getFloatVar("coop_puzzle_resetState") != 1)
		ePuzzleObject.setFloatvar("globalCoop_puzzle_process",fCountdownTimer);

	fCountdownTimer = 0;
	
//RESTORE REMOVED HUD
	globalCoop_huds_Add(ePlayer,ePuzzleObject.getStringVar("coop_puzzle_removeHudWhileModulating"));
}


void globalCoop_puzzle_playerCloseIn()
//----------------------------------------------------------------------
//Animates PuzzleObject on Player Close In
//----------------------------------------------------------------------
{

	entity eTrigger;
	eTrigger=getCurrentEntity();
	
	if(!doesEntityExist(eTrigger)){
		centerprint("^1ERROR: ^3globalCoop_puzzle_playerCloseIn->missing activation trigger");
	}
	
	globalCoop_level_notTriggerable(eTrigger);

string sTargetname;
	sTargetname		= eTrigger.getStringVar("globalCoop_puzzle_targetname");

entity ePuzzleObject;
	ePuzzleObject = getEntity(sTargetname);
	
//REMOVE ALL SINGLEPLAYER PUZZLES NOW!
	if(doesEntityExist(ePuzzleObject)){
		removeClass("PuzzleObject");
		
		string sModel;
		sModel = ePuzzleObject.getmodelname();
		
//PLAY OPENING ANIMATION
		if(sModel != ""){
			globalCoop_actor_animateWaitForAnimation(ePuzzleObject,"opening");
			thread globalCoop_actor_animateWaitForAnimation(ePuzzleObject,"open_idle");
		}
//HOLD
		while(globalCoop_check_playerInRange(ePuzzleObject,200)){
			wait(.5);
		}

//PLAY CLOSING ANIMATION
		if(sModel != ""){
			if(doesEntityExist(ePuzzleObject)){
				globalCoop_puzzle_modelClose(ePuzzleObject,"closing","idle");
			}
		}
		globalCoop_level_triggerable(eTrigger);
	}
}


void globalCoop_puzzle_modulate()
//----------------------------------------------------------------------
// Gets all triggers and does all stuff to make the thing modulating
//----------------------------------------------------------------------
{
entity eTrigger;
eTrigger = getCurrentEntity();	
	
//EXIT IF THE CALLING TRIGGER IS MISSING
	if(doesEntityExist(eTrigger)){
		entity	ePlayer,ePuzzleObject,eTriggerMultipleCloseIn,eTriggerMultipleCloseInTricorder;
		string	sPuzzleTargetname,sTriggerMultipleCloseInTargetname,sPuzzleSolveThreadname;
		ePlayer				= eTrigger.getLastActivatingEntity();
		sPuzzleTargetname	= eTrigger.getStringVar("globalCoop_puzzle_targetname");
		ePuzzleObject		= getEntity( sPuzzleTargetname );		
		
//EXIT IF A COMPONENT IS MISSING
		if(	!doesEntityExist(ePlayer) ||
			!doesEntityExist(ePuzzleObject))
		{
			return;
		}
//GET TIME A PLAYER DOES NEED TO MODULATE THIS
		float fTimeToSolve;
		fTimeToSolve = ePlayer.getFloatVar("globalCoop_puzzle_solvedTime");
//STOP SPAMMING CONSOLE WHEN com_printwarnings 1
		if(ePuzzleObject.getFloatVar("globalCoop_puzzle_disabled") != 1){
			ePuzzleObject.setFloatVar("globalCoop_puzzle_disabled",0);
		}
//EXIT IF: PLAYER MOVES,PUZZLE IS DISABLED,PLAYER IS MODULATING
		if(	ePlayer.getVelocity() != '0 0 0' ||
			ePuzzleObject.getFloatVar("globalCoop_puzzle_disabled") == 1 ||
			ePlayer.getFloatVar("globalCoop_modulatingPuzzle") == 1 ||
			fTimeToSolve > (getLevelTime() + 0.1)){
			return;
		}
//ALLOW ONLY TECHNICIANS TO DO PUZZLE STUFF
string	sModel,sPlayerWeapon;		
		sModel = ePlayer.getStringvar("globalCoop_className");
		if(ePuzzleObject.getFloatvar("globalCoop_puzzleAllowAllClasses") != 1 && sModel != "")
		{
			if(cvar_bool_coop_techOnly == 1 && cvar_bool_coop_disClass == 0 && ePlayer.getStringvar("globalCoop_className") != "Technician")
			{
				ePlayer.setFloatVar("globalCoop_modulatingPuzzle",1);
				globalCoop_huds_textOrHud(ePlayer,"coop_msgNeedTech","^5INFO:^2 You are not a Technician! ^3You need to be a^5 Technician^3 for Modulations");
				wait(2);
				ePlayer.setFloatVar("globalCoop_modulatingPuzzle",0);
				return;
			}
		}
//GRAB OTHER DATA
		eTriggerMultipleCloseIn			= getEntity( sPuzzleTargetname+"MultipleCloseIn");
		eTriggerMultipleCloseInTricorder= getEntity( sPuzzleTargetname+"MultipleCloseInTricorder");
		sModel							= ePuzzleObject.getmodelname();
		fTimeToSolve					= ePuzzleObject.getFloatvar("globalCoop_puzzle_timeToSolve");
		sPlayerWeapon					= ePlayer.getActiveWeaponName();
	
//EXIT IF PLAYER IS MISSING THE KEY!!!
		sModel = ePuzzleObject.getStringVar("coop_puzzle_key");
		if(sModel != ""){
			if(ePlayer.getFloatVar("coop_puzzle_hasSolved_"+sModel) != 1){
				ePlayer.hudprint("^5Info: ^2You are missing a key to access this console! ^3("+sModel+") \n");
				ePlayer.setFloatVar("globalCoop_puzzle_solvedTime",(getLevelTime() + 4));
				return;
			}
		}

//DISABLE THE PUZZLE TRIGGER NOW, WHEN EVER IT IS A MODEL OR A (PLAZEBO)TRIGGER
		globalCoop_level_notTriggerable(ePuzzleObject);
		ePuzzleObject.noUse();
		
//DISABLE THE CLOSEIN DETECTION TRIGGER
		globalCoop_level_notTriggerable(eTriggerMultipleCloseInTricorder);
		
//Create vars
	float	fDistancePlayerToPuzzle;
	float	fRange;
	vector	vDistance;
	vector	vOriginPlayer;
	vector	vOriginPuzzle;
			
//GET/GRAB DATA
		vOriginPuzzle	= ePuzzleObject.getOrigin();
		vOriginPlayer	= ePlayer.getOrigin();
		fRange			= ePuzzleObject.getFloatVar("globalCoop_puzzle_range");
		
//SET OFFSET (player is carring the origin at his feets, and is [128 MODEL] - [108 Bounding Box] units height)
		vOriginPlayer_z			+= 64;
		vDistance 				= vOriginPuzzle - vOriginPlayer;
		fDistancePlayerToPuzzle	= vectorlength( vDistance );

//IF PLAYER IN RANGE, START TIMMER INLINE, 
		if(fDistancePlayerToPuzzle < fRange){
			globalcoop_puzzle_timer(ePlayer,ePuzzleObject,fTimeToSolve);//DYNAMIC TIME RANGE!
		//RESTORE THE PLAYER WEAPON
			if(sPlayerWeapon != ""){
				if(doesEntityExist(ePlayer)){
					ePlayer.stopfire( "dual" );
					if(sPlayerWeapon != "None"){
						ePlayer.use( sPlayerWeapon );
					}else{
						ePlayer.putawayweapon("dual");
					}
				}
			}
		}
		
		if(ePuzzleObject.getFloatvar("globalCoop_puzzle_solved") == 0){
			if(ePuzzleObject.getModelName() != ""){
				thread globalCoop_level_onUse(ePuzzleObject,"globalCoop_puzzle_modulate");
			}else{
				ePuzzleObject.triggerable();
			}
			globalCoop_level_triggerable(eTriggerMultipleCloseInTricorder);
			return;
		}
		
//KILL CONSOLE ANIMATION MANAGER
		killThread("globalCoop_puzzle_playerCloseIn");
		
//CLOSE CONSOLE
		if(doesEntityExist(ePuzzleObject)){
//SET USED MODEL
			string	sPuzzleUsedModel;
			sPuzzleUsedModel = ePuzzleObject.getStringVar("coop_puzzle_used_model");
			if(sPuzzleUsedModel != ""){
				ePuzzleObject.model( sPuzzleUsedModel );
			}
				
			globalCoop_puzzle_modelClose(ePuzzleObject,"closing","idle");
			
			sPuzzleSolveThreadname = ePuzzleObject.getStringVar("globalCoop_puzzle_solveThread");
			
//CALL NOW THE THREAD THE SAVE WAY :), TRIGGER TARGET ENTITY
			globalCoop_level_callReliably(sPuzzleSolveThreadname);
			sModel = ePuzzleObject.getStringVar("globalCoop_puzzle_fireTarget");
			if(sModel != ""){
				globalCoop_level_triggerEntity(getEntity(sModel));
			}
//DISABLE ?
			if(ePuzzleObject.getFloatVar("coop_puzzle_doNotDisable") != 1){
				ePuzzleObject.setFloatVar("globalCoop_puzzle_disabled",1);
			}
//MARK
			ePuzzleObject.setFloatvar("globalCoop_puzzle_solved",0);
			ePuzzleObject.setFloatvar("globalCoop_puzzle_process",0);
			
//ENABLE PUZZLE AGAIN ?
			thread globalCoop_level_onUse(ePuzzleObject,"globalCoop_puzzle_modulate");
			globalCoop_level_triggerable(ePuzzleObject);
			
		//Chek for entity
			globalCoop_level_triggerable(eTriggerMultipleCloseInTricorder);
		}
	}
}


void globalCoop_puzzle_extendModulatingRange(entity ePuzzle, float fExtend)
//----------------------------------------------------------------------
//Extend the Range of the given puzzle replacement
//----------------------------------------------------------------------
{
	if(doesEntityExist(ePuzzle)){
		entity ePuzzleTricorder;
		vector vMaxs;
		vector vMins;
	//Set new range on the puzzle
		ePuzzle.setFloatVar("globalCoop_puzzle_range",((ePuzzle.getFloatVar("globalCoop_puzzle_range")) + fExtend));
	//Get Trigger which fires up the modulating thread
		ePuzzleTricorder = getEntity((ePuzzle.getRawTargetname())+"MultipleCloseInTricorder");
	//Get bbox size
		vMaxs = ePuzzleTricorder.getMaxs();
		vMins = ePuzzleTricorder.getMins();		
	//Calculate new bbox size, and set new sizes
		vMaxs_y += fExtend;
		vMaxs_x += fExtend;
		vMaxs_z += fExtend;
		vMins_x -= fExtend;
		vMins_y -= fExtend;
		vMins_z -= fExtend;
	//Extend trigger
		ePuzzleTricorder.setSize(vMins,vMaxs);
	}
}

void globalCoop_puzzle_modelClose(entity ePuzzle,string sCloseAnim,string sIdleAnim)
//----------------------------------------------------------------------
//play closing and idle anim
//----------------------------------------------------------------------
{
	if(doesEntityExist(ePuzzle)){
		ePuzzle.anim(sCloseAnim);
		wait(.8);
		if(doesEntityExist(ePuzzle)){
			ePuzzle.anim(sIdleAnim);
		}
	}
}


